#!/bin/bash
INVENTORY_FILE=$1
SERVER_WAIT=90s
REMOTE_USER=root

function check_docker_license () {
  if [ ! -f clusters/$CLUSTER_NAME/docker_subscription.lic ]; then 
    echo "** Missing Docker EE License File **"
    echo
    echo "To build a Docker Enterprise Edition cluster you need to have a docker_subscription.lic file located in your ${CLUSTER_NAME} cluster package."
    echo
    exit 1
  fi
}

function esxi_deploy () {
  
  ansible-playbook -i $INVENTORY_FILE ansible/esxi-create-vms-start.yml --extra-vars "ova_template=${OVA_TEMPLATE_FILE}"
  if [ $? -ne 0 ]; then
   echo "There is a problem with the ESXi init-pre script"
   exit 1
  fi

  bash $TEMP_SCRIPT_PATH/esxi-create-vms $OVF_PASSWORD
  if [ $? -ne 0 ]; then
    echo "There was a problem deploying the VMs using ovftool"
    exit 1
  fi

  echo "Waiting ${SERVER_WAIT} to give the VMs time to spin up and get their temporary DHCP addresses..."
  sleep $SERVER_WAIT

  echo "Finishing up ESXi VM Configuration..."
  ansible-playbook -i $INVENTORY_FILE ansible/esxi-create-vms-finish.yml 
  
  echo "Assigning VM static IPs"
  bash $TEMP_SCRIPT_PATH/esxi-set-statics

  echo "Waiting for the VMs to come up with their permanent IPs..."
  ansible-playbook -i $INVENTORY_FILE ansible/wait-for-vms.yml 
  if [ $? -ne 0 ]; then
    echo "FAIL: All the VMs were not responsive at their permanent IPs within the timeout period."
    exit 1
  fi

  #rm $TEMP_SCRIPT_PATH/*_static.sh
  #rm $TEMP_SCRIPT_PATH/esxi-create-vms
  #rm $TEMP_SCRIPT_PATH/esxi-set-statics
  
  ansible all -i $INVENTORY_FILE -m ping -u $REMOTE_USER

  echo "Building cluster: ${CLUSTER_TYPE_NAME}"
  ansible-playbook -i $INVENTORY_FILE ansible/$CLUSTER_TYPE.yml    
  if [ $? -ne 0 ]; then
    echo "FAIL: ${CLUSTER_TYPE_NAME} creation failed!"
    exit 1
  fi

  sleep 30s
  bash clusters/$CLUSTER_NAME/test-cluster

  echo
  echo "SUCCESS: ${CLUSTER_TYPE_NAME}!"
}

function fusion_deploy () {

  PLATFORM=`uname -ra`
  DHCPD_BASE_DIR=/etc/vmware
  DHCPD_CMD=/etc/init.d/vmware
  if [[ $PLATFORM == *"Darwin"* ]]; then 
    DHCPD_BASE_DIR='/Library/Preferences/VMware\ Fusion/'
    DHCPD_CMD='/Applications/VMware\ Fusion.app/Contents/Library/vmnet-cli'
  fi 

  echo "Validating SUDO session (Enter local SUDO password for VMware network management if prompted)"
  sudo date

  echo "Creating the Fusion VMs and configuring the network for static IP assignment..."
  ansible-playbook -i $INVENTORY_FILE ansible/fusion-create-vms.yml --extra-vars "ova_template=${OVA_TEMPLATE_FILE} vmware_dhcpd_base_path='${DHCPD_BASE_DIR}' vmware_dhcpd_cmd='${DHCPD_CMD}'"
  if [ $? -ne 0 ]; then
    echo "There was a problem creating the VMs"
    exit 1
  fi
  
  echo "Configuring the ${CLUSTER_TYPE_NAME} Cluster..."
  ansible-playbook -i $INVENTORY_FILE ansible/$CLUSTER_TYPE.yml 
  if [ $? -ne 0 ]; then
    echo "FAIL: Fusion ${CLUSTER_TYPE_NAME} creation failed!"
    exit 1
  fi

  sleep 10s
  bash clusters/$CLUSTER_NAME/test-cluster

  echo
  echo "SUCCESS: Fusion ${CLUSTER_TYPE_NAME}!"

}

if [ -z INVENTORY_FILE ]; then
  read -s "Enter the target cluster folder: " INVENTORY_FILE
fi

INVENTORY_FILE=./clusters/$INVENTORY_FILE/hosts

if [ ! -f $INVENTORY_FILE ]; then
  echo
  echo "Unable to find inventory file @: ${INVENTORY_FILE}"
  exit 1
fi

CLUSTER_TYPE=`sed -n '/^cluster_type=/ {s///p;q;}' $INVENTORY_FILE`
VMWARE_TARGET=`sed -n '/^vmware_target=/ {s///p;q;}' $INVENTORY_FILE`
CLUSTER_NAME=`sed -n '/^cluster_name=/ {s///p;q;}' $INVENTORY_FILE`

TEMP_SCRIPT_PATH=./tmp/$CLUSTER_NAME

if [ "$CLUSTER_TYPE" == 'photon-swarm' ]; then
  OVA_TEMPLATE_FILE=node-packer/output_ovas/cluster-node-photon-x86_64.ova
  OVA_BUILD_TYPE=photon
  CLUSTER_TYPE_NAME='PhotonOS Swarm'
  REMOTE_USER=root
elif [ "$CLUSTER_TYPE" == 'centos-dcos' ]; then
  OVA_TEMPLATE_FILE=node-packer/output_ovas/cluster-node-centos7-x86_64.ova
  CLUSTER_TYPE_NAME='DC/OS Cluster'
  OVA_BUILD_TYPE=centos7
  SERVER_WAIT=360s
  REMOTE_USER=admin
elif [ "$CLUSTER_TYPE" == 'atomic-swarm' ]; then
  OVA_TEMPLATE_FILE=node-packer/output_ovas/cluster-node-atomic7-x86_64.ova
  CLUSTER_TYPE_NAME='Atomic Swarm'
  OVA_BUILD_TYPE=atomic7
  REMOTE_USER=admin
elif [ "$CLUSTER_TYPE" == 'centos-swarm' ]; then
  OVA_TEMPLATE_FILE=node-packer/output_ovas/cluster-node-centos7-x86_64.ova
  CLUSTER_TYPE_NAME='CentOS Swarm'
  OVA_BUILD_TYPE=centos7
  REMOTE_USER=admin
elif [ "$CLUSTER_TYPE" == 'centos-ucp' ]; then
  check_docker_license
  OVA_TEMPLATE_FILE=node-packer/output_ovas/cluster-node-centos7-x86_64.ova
  CLUSTER_TYPE_NAME='CentOS UCP'
  OVA_BUILD_TYPE=centos7
  REMOTE_USER=admin
elif [ "$CLUSTER_TYPE" == 'rhel-ucp' ]; then
  check_docker_license
  OVA_TEMPLATE_FILE=node-packer/output_ovas/cluster-node-rhel7-x86_64.ova
  CLUSTER_TYPE_NAME='RHEL UCP'
  OVA_BUILD_TYPE=rhel7
  REMOTE_USER=admin
fi

echo
echo "***"
echo " Cluster Name: ${CLUSTER_NAME}"
echo " Cluster Type: ${CLUSTER_TYPE} - ${CLUSTER_TYPE_NAME}"
echo " OVA Template: ${OVA_TEMPLATE_FILE}"
echo " VMware Target: ${VMWARE_TARGET}"
echo "***"
echo 

if [ "$VMWARE_TARGET" == "esxi" ]; then
  read -s -p "Enter ESXi password for ovftool: " OVF_PASSWORD
fi

START_TIME=$SECONDS

if [ ! -f $OVA_TEMPLATE_FILE ]; then
  echo
  echo "Unable to locate template file @: ${OVA_TEMPLATE_FILE}"
  echo "Attempting to build: ${OVA_BUILD_TYPE}"
  cd node-packer
  bash build $OVA_BUILD_TYPE
  cd ..
fi

if [ ! -f $OVA_TEMPLATE_FILE ]; then
  echo
  echo "Unable to build template ova: ${OVA_BUILD_TYPE}"
  exit 1
fi

if [ "$VMWARE_TARGET" == "esxi" ]; then
  esxi_deploy
elif [ "$VMWARE_TARGET" == "fusion" ]; then
  fusion_deploy
fi

ELAPSED_TIME=$(($SECONDS - $START_TIME))
echo "Deployed in: $(($ELAPSED_TIME/60)) min $(($ELAPSED_TIME%60)) sec" 
echo


  