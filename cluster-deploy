#!/bin/bash
INVENTORY_FILE=$1
SERVER_WAIT=90s
REMOTE_USER=root

function check_docker_license () {
  if [ ! -f clusters/$CLUSTER_PKG_FOLDER/docker_subscription.lic ]; then 
    echo "** Missing Docker EE License File **"
    echo
    echo "To build a Docker Enterprise Edition cluster you need to have a docker_subscription.lic file located in your ${CLUSTER_PKG_FOLDER} cluster package."
    echo
    exit 1
  fi
}

function pxe_matchbox_deploy () {

  SERVER_WAIT=30s

  if hash terraform >/dev/null; then

    if [ -z $TECTONIC_HOME ]; then
      echo "TECTONIC_HOME is not set! It must be set to the root of the tectonic-installer folder."
      exit 1
    fi

    echo
    echo "Validating SUDO session (Enter local SUDO password for VMware network management if prompted)"
    sudo date

    read -s -p "Enter Tectonic Admin password: " TECTONIC_PASSWORD

    echo "Building cluster: ${CLUSTER_TYPE_NAME}"

    if ps -p $SSH_AGENT_PID > /dev/null
    then
      echo "ssh-agent is already running"
      # Do something knowing the pid exists, i.e. the process with $PID is running
    else
      echo "Start ssh-agent for Terraform"
      eval `ssh-agent -s`
    fi
    echo "Add id_rsa credentials for Terraform ssh-agent"
    ssh-add ~/.ssh/id_rsa

    if [ "$VMWARE_TARGET" == "esxi" ]; then
      ansible-playbook -i $INVENTORY_FILE ansible/esxi-create-vms-start.yml --extra-vars "ova_template=${OVA_TEMPLATE_FILE} cluster_pkg_folder=${CLUSTER_PKG_FOLDER}"
      if [ $? -ne 0 ]; then
      echo "There is a problem with the ESXi init-pre script"
      exit 1
      fi

      bash $TEMP_SCRIPT_PATH/esxi-create-vms $OVF_PASSWORD
      if [ $? -ne 0 ]; then
        echo "There was a problem deploying the VMs using ovftool"
        exit 1
      fi

      echo "Waiting ${SERVER_WAIT} to give the VMs time to spin up be assigned MAC addresses..."
      sleep $SERVER_WAIT

      ansible-playbook -i $INVENTORY_FILE ansible/$CLUSTER_TYPE.yml  --extra-vars="cluster_pkg_folder=${CLUSTER_PKG_FOLDER} tectonic_admin_password=$TECTONIC_PASSWORD"
      if [ $? -ne 0 ]; then
        echo "FAIL: ${CLUSTER_TYPE_NAME} creation failed!"
        exit 1
      fi      
    else 
      ansible-playbook -i $INVENTORY_FILE ansible/$CLUSTER_TYPE-fusion.yml  --extra-vars="ova_template=${OVA_TEMPLATE_FILE} cluster_pkg_folder=${CLUSTER_PKG_FOLDER} tectonic_admin_password=$TECTONIC_PASSWORD"
      if [ $? -ne 0 ]; then
        echo "FAIL: ${CLUSTER_TYPE_NAME} creation failed!"
        exit 1
      fi
    fi

    rm -rf .terraform
    rm -rf terraform.tf*
    rm -rf generated
    terraform init ${TECTONIC_HOME}/platforms/metal
    if [ $? -ne 0 ]; then
      echo "FAIL: Unable to initialize Tectonic Terraform!"
      exit 1
    fi
    
    terraform plan -var-file=clusters/${CLUSTER_PKG_FOLDER}/terraform.tfvars ${TECTONIC_HOME}/platforms/metal

    echo "**************************************************************************************"
    echo "**************************************************************************************"
    echo " After 'apply' while the terraform is waiting to update the etcd secrets on the controller"
    echo " Open a new tab and start power up the VMS... but only after you see the following begin"
    echo 
    echo " data.archive_file.assets: Refreshing state..."
    echo " null_resource.etcd_secrets: Still creating... (10s elapsed)"
    echo
    echo " $ bash cluster-control ${CLUSTER_PKG_FOLDER} start"
    echo 
    echo " (or start the VMs manually, it doesn't matter, terraform will wait)"
    echo
    echo " To restart the terraform:"
    echo " $ terraform apply -var-file=clusters/${CLUSTER_PKG_FOLDER}/terraform.tfvars ${TECTONIC_HOME}/platforms/metal"
    echo "**************************************************************************************"
    echo "**************************************************************************************"
    echo 
    read -p "Press [Enter] to apply the plan, or [Ctrl-C] to cancel..."
    if [ $? -ne 0 ]; then
      echo "FAIL: ${CLUSTER_TYPE_NAME} creation cancelled!"
      exit 1
    fi    

    terraform apply -var-file=clusters/${CLUSTER_PKG_FOLDER}/terraform.tfvars ${TECTONIC_HOME}/platforms/metal

    echo "Copying generated assets into ${CLUSTER_PKG_FOLDER}/assets..."
    mkdir -p clusters/${CLUSTER_PKG_FOLDER}/assets 
    cp -r ./generated/* clusters/${CLUSTER_PKG_FOLDER}/assets/

    ansible-playbook -i $INVENTORY_FILE ansible/coreos-ready-check.yml

    echo "Initializing CoreOS nodes to specific configuration state..."
    ansible-playbook -i $INVENTORY_FILE ansible/coreos-init.yml
    if [ $? -ne 0 ]; then
      echo "FAIL: Unable to initialize Tectonic CoreOS cluster!"
      exit 1
    else
      echo
      echo "SUCCESS: ${CLUSTER_TYPE_NAME}!"
    fi
  else
   echo "Tectonic Terraform installer needs to be installed and configured in PATH!"
   exit 1
  fi

}

function esxi_deploy () {
  
  ansible-playbook -i $INVENTORY_FILE ansible/esxi-create-vms-start.yml --extra-vars "ova_template=${OVA_TEMPLATE_FILE} cluster_pkg_folder=${CLUSTER_PKG_FOLDER}"
  if [ $? -ne 0 ]; then
   echo "There is a problem with the ESXi init-pre script"
   exit 1
  fi

  bash $TEMP_SCRIPT_PATH/esxi-create-vms $OVF_PASSWORD
  if [ $? -ne 0 ]; then
    echo "There was a problem deploying the VMs using ovftool"
    exit 1
  fi

  echo "Waiting ${SERVER_WAIT} to give the VMs time to spin up and get their temporary DHCP addresses..."
  sleep $SERVER_WAIT

  echo "Finishing up ESXi VM Configuration..."
  ansible-playbook -i $INVENTORY_FILE ansible/esxi-create-vms-finish.yml --extra-vars="cluster_pkg_folder=${CLUSTER_PKG_FOLDER}"
  
  echo "Assigning VM static IPs"
  bash $TEMP_SCRIPT_PATH/esxi-set-statics

  echo "Waiting for the VMs to come up with their permanent IPs..."
  ansible-playbook -i $INVENTORY_FILE ansible/wait-for-vms.yml 
  if [ $? -ne 0 ]; then
    echo "FAIL: All the VMs were not responsive at their permanent IPs within the timeout period."
    exit 1
  fi

  rm $TEMP_SCRIPT_PATH/*_static.sh
  rm $TEMP_SCRIPT_PATH/esxi-create-vms
  rm $TEMP_SCRIPT_PATH/esxi-set-statics
  
  ansible all -i $INVENTORY_FILE -m ping -u $REMOTE_USER

  echo "Building cluster: ${CLUSTER_TYPE_NAME}"
  ansible-playbook -i $INVENTORY_FILE ansible/$CLUSTER_TYPE.yml  --extra-vars="cluster_pkg_folder=${CLUSTER_PKG_FOLDER}"
  if [ $? -ne 0 ]; then
    echo "FAIL: ${CLUSTER_TYPE_NAME} creation failed!"
    exit 1
  fi

  echo "Change the initial ROOT password on VM Nodes..."
  bash cluster-passwd $CLUSTER_PKG_FOLDER root

  if [ "$REMOTE_USER" != "root" ] && [ ! -z $REMOTE_USER ]; then 
    echo "Change remote user [${REMOTE_USER}] password on VM Nodes..."
    bash cluster-passwd $CLUSTER_PKG_FOLDER $REMOTE_USER
  fi 

  if [ -f clusters/$CLUSTER_PKG_FOLDER/test-cluster ]; then
    bash clusters/$CLUSTER_PKG_FOLDER/test-cluster
  fi

  echo
  echo "SUCCESS: ${CLUSTER_TYPE_NAME}!"
}

function fusion_deploy () {

  echo "Validating SUDO session (Enter local SUDO password for VMware network management if prompted)"
  sudo date

  echo "Creating the ${VMWARE_APP} VMs and configuring the network for static IP assignment..."
  ansible-playbook -i $INVENTORY_FILE ansible/fusion-create-vms.yml --extra-vars "ova_template=${OVA_TEMPLATE_FILE} cluster_pkg_folder='${CLUSTER_PKG_FOLDER}'"
  if [ $? -ne 0 ]; then
    echo "There was a problem creating the VMs"
    exit 1
  fi
  
  echo "Configuring the ${CLUSTER_TYPE_NAME} Cluster..."
  ansible-playbook -i $INVENTORY_FILE ansible/$CLUSTER_TYPE.yml --extra-vars="cluster_pkg_folder=${CLUSTER_PKG_FOLDER}"
  if [ $? -ne 0 ]; then
    echo "FAIL: ${VMWARE_APP} ${CLUSTER_TYPE_NAME} creation failed!"
    exit 1
  fi

  if [ -f clusters/$CLUSTER_PKG_FOLDER/test-cluster ]; then
    bash clusters/$CLUSTER_PKG_FOLDER/test-cluster
  fi 

  echo
  echo "SUCCESS: ${VMWARE_APP} ${CLUSTER_TYPE_NAME}!"

}

PLATFORM=`uname -ra`
VMWARE_APP="VMware Workstation"
if [[ $PLATFORM == *"Microsoft"* ]]; then 
  export ANSIBLE_CONFIG=$PWD/ansible.cfg
elif [[ $PLATFORM == *"Darwin"* ]]; then
  VMWARE_APP="VMware Fusion"
fi

if [ -z INVENTORY_FILE ]; then
  read -s "Enter the target cluster folder: " INVENTORY_FILE
fi

INVENTORY_FILE=./clusters/$INVENTORY_FILE/hosts

if [ ! -f $INVENTORY_FILE ]; then
  echo
  echo "Unable to find inventory file @: ${INVENTORY_FILE}"
  exit 1
fi

CLUSTER_TYPE=`sed -n '/^cluster_type=/ {s///p;q;}' $INVENTORY_FILE | tr -d '\n' | tr -d '\r'`
VMWARE_TARGET=`sed -n '/^vmware_target=/ {s///p;q;}' $INVENTORY_FILE | tr -d '\n' | tr -d '\r'`
CLUSTER_NAME=`sed -n '/^cluster_name=/ {s///p;q;}' $INVENTORY_FILE | tr -d '\n' | tr -d '\r'`
REMOTE_USER=`sed -n '/^remote_user=/ {s///p;q;}' $INVENTORY_FILE | tr -d '\n' | tr -d '\r'`

CLUSTER_PKG_PATH=`dirname $INVENTORY_FILE`
CLUSTER_PKG_FOLDER=${CLUSTER_PKG_PATH//.\/clusters\//} 

TEMP_SCRIPT_PATH=./tmp/$CLUSTER_PKG_FOLDER

if [ "$CLUSTER_TYPE" == 'centos-dcos' ]; then
  OVA_TEMPLATE_FILE=node-packer/output_ovas/cluster-node-centos7-dcos-x86_64.ova
  CLUSTER_TYPE_NAME='DC/OS Cluster'
  OVA_BUILD_TYPE=centos7-dcos
  SERVER_WAIT=360s
  REMOTE_USER=admin
elif [ "$CLUSTER_TYPE" == 'centos-swarm' ]; then
  OVA_TEMPLATE_FILE=node-packer/output_ovas/cluster-node-centos7-x86_64.ova
  CLUSTER_TYPE_NAME='CentOS Swarm'
  OVA_BUILD_TYPE=centos7
  REMOTE_USER=admin
elif [ "$CLUSTER_TYPE" == 'centos-k8s' ]; then
  OVA_TEMPLATE_FILE=node-packer/output_ovas/cluster-node-centos7-x86_64.ova
  CLUSTER_TYPE_NAME='CentOS Kubernetes'
  OVA_BUILD_TYPE=centos7
  REMOTE_USER=admin
elif [ "$CLUSTER_TYPE" == 'fedora-k8s' ]; then
  OVA_TEMPLATE_FILE=node-packer/output_ovas/cluster-node-fedora-x86_64.ova
  CLUSTER_TYPE_NAME='Fedora Kubernetes'
  OVA_BUILD_TYPE=fedora
  REMOTE_USER=admin
elif [ "$CLUSTER_TYPE" == 'rhel-swarm' ]; then
  RHEL_LIC=$( cat $CLUSTER_PKG_PATH/rhel.lic)
  OVA_TEMPLATE_FILE=node-packer/output_ovas/cluster-node-rhel7-x86_64.ova
  CLUSTER_TYPE_NAME='RHEL Swarm'
  OVA_BUILD_TYPE=rhel7
  REMOTE_USER=admin
elif [ "$CLUSTER_TYPE" == 'coreos-provisioner' ]; then
  CLUSTER_NAME="n/a"
  OVA_TEMPLATE_FILE=node-packer/output_ovas/coreos-centos-provisioner-x86_64.ova
  CLUSTER_TYPE_NAME='CoreOS Provisioner'
  OVA_BUILD_TYPE=coreos-provisioner
  SERVER_WAIT=90s
  REMOTE_USER=admin
elif [ "$CLUSTER_TYPE" == 'coreos-pxe' ]; then
  OVA_TEMPLATE_FILE=node-packer/output_ovas/coreos-pxe-node.ova
  CLUSTER_TYPE_NAME='CoreOS Tectonic'
  OVA_BUILD_TYPE=coreos-pxe
  SERVER_WAIT=90s
  REMOTE_USER=admin
elif [ "$CLUSTER_TYPE" == 'targetd-server' ]; then
  OVA_TEMPLATE_FILE=node-packer/output_ovas/targetd-server-x86_64.ova
  CLUSTER_TYPE_NAME='Targetd iSCSI Storage Appliance'
  OVA_BUILD_TYPE=targetd-server
  SERVER_WAIT=90s
  REMOTE_USER=admin
fi


TC=''
NC=''
if [ "$TERM" == "xterm-256color" ]; then
  TC='\033[1;34m'
  NC='\033[0m' # No Color
fi 

echo
echo "***"
echo -e " Cluster Name    : ${TC}${CLUSTER_NAME}${NC}"
echo -e " Cluster Package : ${TC}${CLUSTER_PKG_FOLDER}${NC}"
echo -e " Cluster Type    : ${TC}${CLUSTER_TYPE} - ${CLUSTER_TYPE_NAME}${NC}"
echo -e " OVA Template    : ${TC}${OVA_TEMPLATE_FILE}${NC}"
echo -e " VMware Target   : ${TC}${VMWARE_TARGET}${NC}"
echo "***"
echo

if [ "$VMWARE_TARGET" == "esxi" ]; then
  read -s -p "Enter ESXi password for ovftool: " OVF_PASSWORD
fi

START_TIME=$SECONDS

if [ ! -f $OVA_TEMPLATE_FILE ]; then
  echo
  echo "Unable to locate template file @: ${OVA_TEMPLATE_FILE}"
  echo "Attempting to build: ${OVA_BUILD_TYPE}"
  cd node-packer
  bash build $OVA_BUILD_TYPE $CLUSTER_PKG_FOLDER $RHEL_LIC 
  cd ..
fi

if [ ! -f $OVA_TEMPLATE_FILE ]; then
  echo
  echo "Unable to build template ova: ${OVA_BUILD_TYPE}"
  exit 1
fi

if [ "$CLUSTER_TYPE" == "coreos-pxe" ]; then
  pxe_matchbox_deploy
else
  if [ "$VMWARE_TARGET" == "esxi" ]; then
    esxi_deploy
  elif [ "$VMWARE_TARGET" == "fusion" ]; then
    fusion_deploy
  fi
fi

ELAPSED_TIME=$(($SECONDS - $START_TIME))
echo "Deployed in: $(($ELAPSED_TIME/60)) min $(($ELAPSED_TIME%60)) sec" 
echo


  