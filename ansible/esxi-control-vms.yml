---
- hosts: vmware_vms
  remote_user: root
  gather_facts: false
  tasks:  
  - name: scan the VMS for the VM ID
    local_action:
      module: shell
      _raw_params: ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null {{ esxi_user }}@{{ esxi_host }} vim-cmd vmsvc/getallvms | grep " {{ inventory_hostname }} " | cut -d" " -f1
    register: vm_id
  
  - debug: msg="{{ vm_id.stdout }}"

  - name: start the VMs
    local_action:
      module: shell
      _raw_params: ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null {{ esxi_user }}@{{ esxi_host }} vim-cmd vmsvc/power.on {{ vm_id.stdout }} 
    when: vm_id.stdout is defined and vm_action == 'start'

  - name: stop the VMs
    local_action:
      module: shell
      _raw_params: ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null {{ esxi_user }}@{{ esxi_host }} vim-cmd vmsvc/power.off {{ vm_id.stdout }} 
    when: vm_id.stdout is defined and vm_action == 'stop'

  - name: suspend the VMs
    local_action:
      module: shell
      _raw_params: ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null {{ esxi_user }}@{{ esxi_host }} vim-cmd vmsvc/power.suspend {{ vm_id.stdout }} 
    when: vm_id.stdout is defined and vm_action == 'suspend'

  - name: stop the VMs 
    local_action:
      module: shell
      _raw_params: ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null {{ esxi_user }}@{{ esxi_host }} vim-cmd vmsvc/power.off {{ vm_id.stdout }} 
    ignore_errors: true
    when: vm_action == 'destroy'
  
  - name: destroy the VMs 
    local_action:
      module: shell
      _raw_params: ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null {{ esxi_user }}@{{ esxi_host }} vim-cmd vmsvc/destroy {{ vm_id.stdout }} 
    when: vm_action == 'destroy'

