---
# This playbook patches in place Kubernetes
- hosts: k8s_masters,k8s_workers
  remote_user: "{{ remote_user }}"
  become: true
  any_errors_fatal: true
  vars:
    kube_config_file: "{{ playbook_dir | replace('/ansible', '') }}/clusters/{{ cluster_pkg_folder }}/kube-config"
  roles:
  - role: common
  - role: k8s-settings

  tasks:
  - name: install k8s version lock (CentOS)
    shell: "yum install yum-plugin-versionlock"
    args:
      warn: false
    register: k8s_install_lock
    when: cluster_type == "centos-k8s"
    retries: 5
    delay: 10
    until: k8s_install_lock.rc is defined and k8s_install_lock.rc == 0

  - debug: msg="{{ k8s_install_lock.stdout_lines }}"
    when: cluster_type == "centos-k8s"

  - name: install k8s versionlock plugin for DNF (Fedora / CentOS 8)
    shell: "dnf -y install python3-dnf-plugin-versionlock"
    args:
      warn: false
    register: k8s_install_lock
    when: cluster_type == "fedora-k8s" or cluster_type == "centos8-k8s"
    retries: 5
    delay: 10
    until: k8s_install_lock.rc is defined and k8s_install_lock.rc == 0
    
  - debug: msg="{{ k8s_install_lock.stdout_lines }}"
    when: cluster_type == "fedora-k8s" or cluster_type == "centos8-k8s"

- hosts: k8s_masters
  remote_user: "{{ remote_user }}"
  become: true
  serial: 1
  any_errors_fatal: true
  vars:
    kube_config_file: "{{ playbook_dir | replace('/ansible', '') }}/clusters/{{ cluster_pkg_folder }}/kube-config"
  tasks:

  - name: unlock k8s (CentOS)
    shell: "yum versionlock clear"
    args:
      warn: false
    register: k8s_clear_lock
    when: cluster_type == "centos-k8s"
    retries: 5
    delay: 10
    until: k8s_clear_lock.rc is defined and k8s_clear_lock.rc == 0

  - debug: msg="{{ k8s_clear_lock.stdout_lines }}"
    when: cluster_type == "centos-k8s"

  - name: update k8s repo (CentOS)
    shell: "yum makecache fast"
    args:
      warn: false
    register: k8s_update_repo
    when: cluster_type == "centos-k8s"
    retries: 5
    delay: 10
    until: k8s_update_repo.rc is defined and k8s_update_repo.rc == 0

  - debug: msg="{{ k8s_update_repo.stdout_lines }}"
    when: cluster_type == "centos-k8s"

  - name: unlock k8s (Fedora / CentOS 8)
    shell: "dnf -y versionlock clear"
    args:
      warn: false
    register: k8s_install_unlock_version
    when: cluster_type == "fedora-k8s" or cluster_type == "centos8-k8s"
    retries: 5
    delay: 10
    until: k8s_install_unlock_version.rc is defined and k8s_install_unlock_version.rc == 0
    
  - debug: msg="{{ k8s_install_unlock_version.stdout_lines }}"
    when: cluster_type == "fedora-k8s" or cluster_type == "centos8-k8s"

  - name: update k8s repo (Fedora / CentOS 8)
    shell: "dnf makecache"
    args:
      warn: false
    register: k8s_update_repo
    when: cluster_type == "fedora-k8s" or cluster_type == "centos8-k8s"
    retries: 5
    delay: 10
    until: k8s_update_repo.rc is defined and k8s_update_repo.rc == 0
    
  - debug: msg="{{ k8s_update_repo.stdout_lines }}"
    when: cluster_type == "fedora-k8s" or cluster_type == "centos8-k8s"

  - name: update k8s repo (Ubuntu)
    shell: "apt-get update"
    args:
      warn: false
    register: k8s_update_repo
    when: cluster_type == "ubuntu-k8s"
    
  - debug: msg="{{ k8s_update_repo.stdout_lines }}"
    when: cluster_type == "ubuntu-k8s" 

  - name: update kubeadm (CentOS)
    shell: "yum -y upgrade kubeadm-{{ k8s_version }}"
    args:
      warn: false
    register: kubeadm_update
    when: cluster_type == "centos-k8s"
    retries: 5
    delay: 10
    until: kubeadm_update.rc is defined and kubeadm_update.rc == 0

  - debug: msg="{{ kubeadm_update.stdout_lines }}"
    when: cluster_type == "centos-k8s"

  - name: version lock kubeadm (CentOS)
    shell: "yum -y versionlock kubeadm-{{ k8s_version }}"
    args:
      warn: false
    register: kubeadm_install_lock_version
    when: cluster_type == "centos-k8s"
    retries: 5
    delay: 10
    until: kubeadm_install_lock_version.rc is defined and kubeadm_install_lock_version.rc == 0

  - debug: msg="{{ kubeadm_install_lock_version.stdout_lines }}"
    when: cluster_type == "centos-k8s"

  - name: update kubeadm first (Fedora / CentOS 8)
    shell: "dnf -y upgrade kubeadm-{{ k8s_version }}"
    args:
      warn: false
    register: k8s_update
    when: cluster_type == "fedora-k8s" or cluster_type == "centos8-k8s"
    
  - debug: msg="{{ k8s_update.stdout_lines }}"
    when: cluster_type == "fedora-k8s" or cluster_type == "centos8-k8s"

  - name: lock kubeadm (Fedora / CentOS 8)
    shell: "dnf -y versionlock kubeadm-{{ k8s_version }}"
    args:
      warn: false
    register: kubeadm_install_lock_version
    when: cluster_type == "fedora-k8s" or cluster_type == "centos8-k8s"

  - debug: msg="{{ kubeadm_install_lock_version.stdout_lines }}"
    when: cluster_type == "fedora-k8s" or cluster_type == "centos8-k8s"

  - name: unlock kubeadm (Ubuntu)
    shell: "apt-mark unhold kubeadm={{ k8s_version }}"
    args:
      warn: false
    register: kubeadm_install_unlock
    when: cluster_type == "ubuntu-k8s" 
    
  - debug: msg="{{ kubeadm_install_unlock.stdout_lines }}"
    when: cluster_type == "ubuntu-k8s" 

  - name: update kubeadm first (Ubuntu)
    shell: "apt-get -y install kubeadm={{ k8s_version }}"
    args:
      warn: false
    register: kubeadm_update
    when: cluster_type == "ubuntu-k8s"
    
  - debug: msg="{{ kubeadm_update.stdout_lines }}"
    when: cluster_type == "ubuntu-k8s" 

  - name: lock kubeadm (Ubuntu)
    shell: "apt-mark hold kubeadm={{ k8s_version }}"
    args:
      warn: false
    register: kubeadm_install_lock
    when: cluster_type == "ubuntu-k8s"
    
  - debug: msg="{{ kubeadm_install_lock.stdout_lines }}"
    when: cluster_type == "ubuntu-k8s" 

  - name: get kubeadm version full
    shell: 'kubeadm version -o short | sed "s/v//g" '
    register: kubeadm_version_full
    when: "inventory_hostname == groups['k8s_masters'][0]"

  - name: set kubeadm_version_full fact
    set_fact:
      kubeadm_version_full: "{{ kubeadm_version_full.stdout }}"
    run_once: true
    when: "inventory_hostname == groups['k8s_masters'][0]"

  - name: get kubeadm version short
    shell: 'kubeadm version -o short | sed "s/v//g" | cut -c1-4'
    register: kubeadm_version_short
    when: "inventory_hostname == groups['k8s_masters'][0]"

  - name: set kubeadm_version_short fact
    set_fact:
      kubeadm_version_short: "{{ kubeadm_version_short.stdout }}"
    run_once: true
    when: "inventory_hostname == groups['k8s_masters'][0]"

  - name: set k8s_version_short fact
    set_fact:
      k8s_version_short: "{{ k8s_version[:4] }}"
    run_once: true
    when: "inventory_hostname == groups['k8s_masters'][0]"

  - debug: msg="kubeadm_version_short [{{ kubeadm_version_short }}], k8s_version_short [{{ k8s_version_short }}]"
  - debug: msg="kubeadm_version_full [{{ kubeadm_version_full }}]"

  - name: kubeadm is higher major version, running upgrade plan
    shell: "kubeadm upgrade plan >> /tmp/kube_upgrade_plan"
    when: kubeadm_version_short != k8s_version_short and 
      inventory_hostname == groups['k8s_masters'][0]

  - name: display upgrade plan
    shell: "cat /tmp/kube_upgrade_plan"
    register: k8s_upgrade_plan_out
    when: kubeadm_version_short != k8s_version_short and 
      inventory_hostname == groups['k8s_masters'][0]

  - debug: msg="{{ k8s_upgrade_plan_out.stdout_lines }}"
    when: kubeadm_version_short != k8s_version_short and 
      inventory_hostname == groups['k8s_masters'][0]

  - debug: msg="running [kubeadm upgrade apply v{{ kubeadm_version_full }}]"
    when: kubeadm_version_short != k8s_version_short and 
      inventory_hostname == groups['k8s_masters'][0]

  - name: running upgrade apply on first master
    shell: "kubeadm upgrade apply v{{ kubeadm_version_full }}"
    register: k8s_upgrade_apply_out
    when: kubeadm_version_short != k8s_version_short and 
      inventory_hostname == groups['k8s_masters'][0]

  - debug: msg="{{ k8s_upgrade_apply_out.stdout_lines }}"
    when: kubeadm_version_short != k8s_version_short and 
      inventory_hostname == groups['k8s_masters'][0]

  - name: running upgrade node on other master
    shell: "kubeadm upgrade node"
    register: k8s_upgrade_node_out
    when: kubeadm_version_short != k8s_version_short and 
      inventory_hostname != groups['k8s_masters'][0]

  - debug: msg="{{ k8s_upgrade_node_out.stdout_lines }}"
    when: kubeadm_version_short != k8s_version_short and 
      inventory_hostname != groups['k8s_masters'][0]

  - name: drain node
    local_action:
      module: shell
      _raw_params: "kubectl --kubeconfig {{ kube_config_file }} drain {{ node_fqdn }} --ignore-daemonsets --delete-local-data"
    become: false
    register: node_drain_out
    when: "inventory_hostname == groups['k8s_masters'][0]"

  - debug: msg="{{ node_drain_out.stdout_lines }}"

  - name: allow some time for the evictions
    pause:
      seconds: 45

  - name: stop the kubelet service 
    shell: systemctl stop kubelet
    register: kubelet_stop_out

  - name: update k8s first (CentOS)
    shell: "yum -y upgrade kubectl-{{ k8s_version }} kubelet-{{ k8s_version }}"
    args:
      warn: false
    register: k8s_update
    when: cluster_type == "centos-k8s"
    retries: 5
    delay: 10
    until: k8s_update.rc is defined and k8s_update.rc == 0

  - debug: msg="{{ k8s_update.stdout_lines }}"
    when: cluster_type == "centos-k8s"

  - name: version lock k8s (CentOS)
    shell: "yum -y versionlock kubectl-{{ k8s_version }} kubelet-{{ k8s_version }}"
    args:
      warn: false
    register: k8s_install_lock_version
    when: cluster_type == "centos-k8s"
    retries: 5
    delay: 10
    until: k8s_install_lock_version.rc is defined and k8s_install_lock_version.rc == 0

  - debug: msg="{{ k8s_install_lock_version.stdout_lines }}"
    when: cluster_type == "centos-k8s"

  - name: update k8s first (Fedora / CentOS 8)
    shell: "dnf -y upgrade kubectl-{{ k8s_version }} kubelet-{{ k8s_version }}"
    args:
      warn: false
    register: k8s_update
    when: cluster_type == "fedora-k8s" or cluster_type == "centos8-k8s"
    
  - debug: msg="{{ k8s_update.stdout_lines }}"
    when: cluster_type == "fedora-k8s" or cluster_type == "centos8-k8s"

  - name: lock k8s (Fedora / CentOS 8)
    shell: "dnf -y versionlock kubectl-{{ k8s_version }} kubelet-{{ k8s_version }}"
    args:
      warn: false
    register: k8s_install_lock_version
    when: cluster_type == "fedora-k8s" or cluster_type == "centos8-k8s"
    
  - debug: msg="{{ k8s_install_lock_version.stdout_lines }}"
    when: cluster_type == "fedora-k8s" or cluster_type == "centos8-k8s"

  - name: unlock k8s (Ubuntu)
    shell: "apt-mark unhold kubectl={{ k8s_version }} kubelet={{ k8s_version }}"
    args:
      warn: false
    register: k8s_install_unlock
    when: cluster_type == "ubuntu-k8s"
    
  - debug: msg="{{ k8s_install_unlock.stdout_lines }}"
    when: cluster_type == "ubuntu-k8s" 

  - name: update k8s first (Ubuntu)
    shell: "apt-get update && apt-get -y install kubectl={{ k8s_version }} kubelet={{ k8s_version }}"
    args:
      warn: false
    register: k8s_update
    when: cluster_type == "ubuntu-k8s"
    
  - debug: msg="{{ k8s_update.stdout_lines }}"
    when: cluster_type == "ubuntu-k8s" 

  - name: lock k8s (Ubuntu)
    shell: "apt-mark hold kubectl={{ k8s_version }} kubelet={{ k8s_version }}"
    args:
      warn: false
    register: k8s_install_lock
    when: cluster_type == "ubuntu-k8s"
    
  - debug: msg="{{ k8s_install_lock.stdout_lines }}"
    when: cluster_type == "ubuntu-k8s" 

  - name: update underlying OS (Centos7) 
    shell: yum -y upgrade 
    register: centos7_update_out
    when: cluster_type == "centos-k8s"

  - debug: msg="{{ centos7_update_out.stdout_lines }}"
    when: cluster_type == "centos-k8s"

  - name: update underlying OS (Fedora/Centos8) 
    shell: dnf -y upgrade 
    register: fedora_update_out
    when: cluster_type == "fedora-k8s" or cluster_type == "centos8-k8s"

  - debug: msg="{{ fedora_update_out.stdout_lines }}"
    when: cluster_type == "fedora-k8s" or cluster_type == "centos8-k8s"

  - name: update underlying OS (Ubuntu) 
    shell: apt-get -y upgrade 
    register: ubuntu_update_out
    when: cluster_type == "ubuntu-k8s" 

  - debug: msg="{{ ubuntu_update_out.stdout_lines }}"
    when: cluster_type == "ubuntu-k8s" 

  - name: start the kubelet service 
    shell: systemctl start kubelet
    register: kubelet_start_out

  - name: uncordon node
    local_action:
      module: shell
      _raw_params: "kubectl --kubeconfig {{ kube_config_file }} uncordon {{ node_fqdn }}"
    become: false
    register: kubelet_uncordon_out

  - debug: msg="{{ kubelet_uncordon_out.stdout_lines }}"

  - name: allow some time for things to recover
    pause:
      seconds: 10

  - name: cluster node status
    local_action:
      module: shell
      _raw_params: "kubectl --kubeconfig {{ kube_config_file }} get nodes"
    become: false
    register: node_status

  - debug: msg="{{ node_status.stdout_lines }}"

- hosts: k8s_workers
  remote_user: "{{ remote_user }}"
  become: true
  serial: 1
  any_errors_fatal: true
  vars:
    kube_config_file: "{{ playbook_dir | replace('/ansible', '') }}/clusters/{{ cluster_pkg_folder }}/kube-config"
  tasks:

  - name: drain node
    local_action:
      module: shell
      _raw_params: "kubectl --kubeconfig {{ kube_config_file }} drain {{ node_fqdn }} --ignore-daemonsets --delete-local-data"
    become: false
    register: node_drain_out
 
  - debug: msg="{{ node_drain_out.stdout_lines }}"

  - name: unlock k8s (CentOS)
    shell: "yum versionlock clear"
    args:
      warn: false
    register: k8s_clear_lock
    when: cluster_type == "centos-k8s"

  - debug: msg="{{ k8s_clear_lock.stdout_lines }}"
    when: cluster_type == "centos-k8s"

  - name: update k8s repo (CentOS)
    shell: "yum makecache fast"
    args:
      warn: false
    register: k8s_update_repo
    when: cluster_type == "centos-k8s"

  - debug: msg="{{ k8s_update_repo.stdout_lines }}"
    when: cluster_type == "centos-k8s"

  - name: unlock k8s (Fedora / CentOS 8)
    shell: "dnf -y versionlock clear"
    args:
      warn: false
    register: k8s_install_unlock_version
    when: cluster_type == "fedora-k8s" or cluster_type == "centos8-k8s"
    
  - debug: msg="{{ k8s_install_unlock_version.stdout_lines }}"
    when: cluster_type == "fedora-k8s" or cluster_type == "centos8-k8s"

  - name: update k8s repo (Fedora / CentOS 8)
    shell: "dnf makecache"
    args:
      warn: false
    register: k8s_update_repo
    when: cluster_type == "fedora-k8s" or cluster_type == "centos8-k8s"
    
  - debug: msg="{{ k8s_update_repo.stdout_lines }}"
    when: cluster_type == "fedora-k8s" or cluster_type == "centos8-k8s"

  - name: update k8s repo (Ubuntu)
    shell: "apt-get update"
    args:
      warn: false
    register: k8s_install_unlock
    when: cluster_type == "ubuntu-k8s"
    
  - debug: msg="{{ k8s_install_unlock.stdout_lines }}"
    when: cluster_type == "ubuntu-k8s" 

  - name: update kubeadm (CentOS)
    shell: "yum -y upgrade kubeadm-{{ k8s_version }}"
    args:
      warn: false
    register: kubeadm_update
    when: cluster_type == "centos-k8s"

  - debug: msg="{{ kubeadm_update.stdout_lines }}"

  - name: version lock kubeadm (CentOS)
    shell: "yum -y versionlock kubeadm-{{ k8s_version }}"
    args:
      warn: false
    register: kubeadm_install_lock_version
    when: cluster_type == "centos-k8s"
    retries: 5
    delay: 10
    until: kubeadm_install_lock_version.rc is defined and kubeadm_install_lock_version.rc == 0

  - debug: msg="{{ kubeadm_install_lock_version.stdout_lines }}"
    when: cluster_type == "centos-k8s"

  - name: update kubeadm first (Fedora / CentOS 8)
    shell: "dnf -y upgrade kubeadm-{{ k8s_version }}"
    args:
      warn: false
    register: k8s_update
    
  - debug: msg="{{ k8s_update.stdout_lines }}"
    when: cluster_type == "fedora-k8s" or cluster_type == "centos8-k8s"

  - name: lock kubeadm (Fedora / CentOS 8)
    shell: "dnf -y versionlock kubeadm-{{ k8s_version }}"
    args:
      warn: false
    register: kubeadm_install_lock_version

  - debug: msg="{{ kubeadm_install_lock_version.stdout_lines }}"
    when: cluster_type == "fedora-k8s" or cluster_type == "centos8-k8s"

  - name: unlock kubeadm (Ubuntu)
    shell: "apt-mark unhold kubeadm={{ k8s_version }}"
    args:
      warn: false
    register: kubeadm_install_unlock
    when: cluster_type == "ubuntu-k8s" 
    
  - debug: msg="{{ kubeadm_install_unlock.stdout_lines }}"
    when: cluster_type == "ubuntu-k8s" 

  - name: update kubeadm first (Ubuntu)
    shell: "apt-get -y install kubeadm={{ k8s_version }}"
    args:
      warn: false
    register: kubeadm_update
    when: cluster_type == "ubuntu-k8s"
    
  - debug: msg="{{ k8s_update.stdout_lines }}"
    when: cluster_type == "ubuntu-k8s" 

  - name: lock kubeadm (Ubuntu)
    shell: "apt-mark hold kubeadm={{ k8s_version }}"
    args:
      warn: false
    register: kubeadm_install_lock
    when: cluster_type == "ubuntu-k8s"
    
  - debug: msg="{{ kubeadm_install_lock.stdout_lines }}"
    when: cluster_type == "ubuntu-k8s" 

  - name: running upgrade node on worker as this is major upgrade
    shell: "kubeadm upgrade node"
    register: k8s_upgrade_node_out
    when: kubeadm_version_short != k8s_version_short 

  - debug: msg="{{ k8s_upgrade_node_out.stdout_lines }}"
    when: kubeadm_version_short != k8s_version_short 

  - name: stop the kubelet service 
    shell: systemctl stop kubelet
    register: kubelet_stop_out

  - name: update k8s first (CentOS)
    shell: "yum -y upgrade kubectl-{{ k8s_version }} kubelet-{{ k8s_version }}"
    args:
      warn: false
    register: k8s_update
    when: cluster_type == "centos-k8s"
    retries: 5
    delay: 10
    until: k8s_update.rc is defined and k8s_update.rc == 0

  - debug: msg="{{ k8s_update.stdout_lines }}"
    when: cluster_type == "centos-k8s"

  - name: version lock k8s (CentOS)
    shell: "yum -y versionlock kubectl-{{ k8s_version }} kubelet-{{ k8s_version }}"
    args:
      warn: false
    register: k8s_install_lock_version
    when: cluster_type == "centos-k8s"
    retries: 5
    delay: 10
    until: k8s_install_lock_version.rc is defined and k8s_install_lock_version.rc == 0

  - debug: msg="{{ k8s_install_lock_version.stdout_lines }}"
    when: cluster_type == "centos-k8s"

  - name: update k8s first (Fedora / CentOS 8)
    shell: "dnf -y upgrade kubectl-{{ k8s_version }} kubelet-{{ k8s_version }}"
    args:
      warn: false
    register: k8s_update
    when: cluster_type == "fedora-k8s" or cluster_type == "centos8-k8s"
    
  - debug: msg="{{ k8s_update.stdout_lines }}"
    when: cluster_type == "fedora-k8s" or cluster_type == "centos8-k8s"

  - name: lock k8s (Fedora / CentOS 8)
    shell: "dnf -y versionlock kubectl-{{ k8s_version }} kubelet-{{ k8s_version }}"
    args:
      warn: false
    register: k8s_install_lock_version
    when: cluster_type == "fedora-k8s" or cluster_type == "centos8-k8s"
    
  - debug: msg="{{ k8s_install_lock_version.stdout_lines }}"
    when: cluster_type == "fedora-k8s" or cluster_type == "centos8-k8s"

  - name: unlock k8s (Ubuntu)
    shell: "apt-mark unhold kubectl={{ k8s_version }} kubelet={{ k8s_version }}"
    args:
      warn: false
    register: k8s_install_unlock
    when: cluster_type == "ubuntu-k8s"
    
  - debug: msg="{{ k8s_install_unlock.stdout_lines }}"
    when: cluster_type == "ubuntu-k8s" 

  - name: update k8s first (Ubuntu)
    shell: "apt-get update && apt-get -y install kubectl={{ k8s_version }} kubelet={{ k8s_version }}"
    args:
      warn: false
    register: k8s_update
    when: cluster_type == "ubuntu-k8s"
    
  - debug: msg="{{ k8s_update.stdout_lines }}"
    when: cluster_type == "ubuntu-k8s" 

  - name: lock k8s (Ubuntu)
    shell: "apt-mark hold kubectl={{ k8s_version }} kubelet={{ k8s_version }}"
    args:
      warn: false
    register: k8s_install_lock
    when: cluster_type == "ubuntu-k8s"
    
  - debug: msg="{{ k8s_install_lock.stdout_lines }}"
    when: cluster_type == "ubuntu-k8s" 

  - name: update underlying OS (Centos7) 
    shell: yum -y upgrade 
    register: centos7_update_out
    when: cluster_type == "centos-k8s"

  - debug: msg="{{ centos7_update_out.stdout_lines }}"
    when: cluster_type == "centos-k8s"

  - name: update underlying OS (Fedora/Centos8) 
    shell: dnf -y upgrade 
    register: fedora_update_out
    when: cluster_type == "fedora-k8s" or cluster_type == "centos8-k8s"

  - debug: msg="{{ fedora_update_out.stdout_lines }}"
    when: cluster_type == "fedora-k8s" or cluster_type == "centos8-k8s"

  - name: update underlying OS (Ubuntu) 
    shell: apt-get -y upgrade 
    register: ubuntu_update_out
    when: cluster_type == "ubuntu-k8s" 

  - debug: msg="{{ ubuntu_update_out.stdout_lines }}"
    when: cluster_type == "ubuntu-k8s" 

  - name: start the kubelet service 
    shell: systemctl start kubelet
    register: kubelet_start_out

  - name: uncordon node
    local_action:
      module: shell
      _raw_params: "kubectl --kubeconfig {{ kube_config_file }} uncordon {{ node_fqdn }}"
    become: false
    register: kubelet_uncordon_out

  - debug: msg="{{ kubelet_uncordon_out.stdout_lines }}"

  - name: allow some time for things to recover
    pause:
      seconds: 30

  - name: cluster node status
    local_action:
      module: shell
      _raw_params: "kubectl --kubeconfig {{ kube_config_file }} get nodes"
    become: false
    register: node_status

  - debug: msg="{{ node_status.stdout_lines }}"

- hosts: k8s_masters
  remote_user: "{{ remote_user }}"
  become: true
  any_errors_fatal: true
  
  roles:
  - role: k8s-inspect
    when: "inventory_hostname == groups['k8s_masters'][0]"
