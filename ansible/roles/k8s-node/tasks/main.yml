- name: ensure netfilter is loaded
  shell: modprobe br_netfilter

- name: enable ipv4 forwarding
  sysctl:
    name: net.ipv4.ip_forward  
    value: 1
    state: present

- name: enable changes
  shell: sysctl -w net.ipv4.route.flush=1

- name: apply docker settings
  include: cri-docker.yml
  when: k8s_container_runtime != 'cri-o'

- name: apply crio settings
  include: cri-crio.yml
  when: k8s_container_runtime == 'cri-o'

- name: configure firewalld for kubernetes (optional)
  include: firewalld.yml
  when: k8s_firewalld_enabled|bool == True

- name: disable firewalld
  service:
    name: firewalld
    state: stopped
    enabled: no
  ignore_errors: true
  when: k8s_firewalld_enabled|bool != True

- name: turn swap off
  shell: swapoff -a

- name: remove swap from fstab
  lineinfile:
    path: /etc/fstab
    state: absent
    regexp: '^/dev/mapper/system-swap'

- name: install iSCSI utils for CentOS 7
  shell: "yum install -y iscsi-initiator-utils"
  args:
    warn: false
  when: cluster_type == "centos-k8s"
  retries: 5
  delay: 5
  register: result
  until: result.rc is defined and result.rc == 0

- name: install iSCSI utils for Fedora / CentOS 8
  shell: "dnf install -y iscsi-initiator-utils"
  args:
    warn: false
  when: cluster_type == "fedora-k8s" or cluster_type == "centos8-k8s"
  retries: 5
  delay: 5
  register: result
  until: result.rc is defined and result.rc == 0
 
- name: install iSCSI utils for Ubuntu
  shell: "apt-get -y install open-iscsi"
  args:
    warn: false
  when: cluster_type == "ubuntu-k8s"
  retries: 5
  delay: 5
  register: result
  until: result.rc is defined and result.rc == 0

- name: read node iscsi initiator value in non-Ubuntu OS
  shell: CODE=`cat /etc/iscsi/initiatorname.iscsi` && echo ${CODE//InitiatorName=/}
  register: vm_initiator_code
  when: cluster_type != "ubuntu-k8s"

- debug: msg="{{ vm_initiator_code.stdout }}"
  when: cluster_type != "ubuntu-k8s"

- name: read node iscsi initiator value in Ubuntu OS
  shell: cat /etc/iscsi/initiatorname.iscsi | grep InitiatorName= | sed 's/^InitiatorName=//'
  register: vm_initiator_code
  when: cluster_type == "ubuntu-k8s"

- debug: msg="{{ vm_initiator_code.stdout }}"
  when: cluster_type == "ubuntu-k8s"

- name: ensure the iSCSId daemon is running and enabled on the nodes
  shell: systemctl enable iscsid && systemctl start iscsid

- name: install Kubernetes on all the nodes
  include: k8s-install.yml

