- name: remove any updated docker-ce if it exists on CentOS 7
  command: yum -y remove docker-ce docker-ce-cli containerd.io
  args:
    warn: false
  when: cluster_type == "centos-k8s" and k8s_docker_version == 'distro'

- name: install base distro docker on CentOS 7
  command: yum -y install docker
  when: cluster_type == "centos-k8s" and k8s_docker_version == 'distro'
  retries: 5
  delay: 10
  register: result
  until: result.rc is defined and result.rc == 0

- name: remove any updated docker-ce if it exists on Fedora or CentOS 8
  dnf:
    name: docker-ce
    state: absent
  when: (cluster_type == "fedora-k8s" or cluster_type == "centos8-k8s") and k8s_docker_version == 'distro'

- name: remove any updated docker-ce-cli if it exists on Fedora or CentOS 8
  dnf:
    name: docker-ce-cli
    state: absent
  when: (cluster_type == "fedora-k8s" or cluster_type == "centos8-k8s") and k8s_docker_version == 'distro'

- name: remove any updated containerd if it exists on Fedora or CentOS 8
  dnf:
    name: containerd.io
    state: absent
  when: (cluster_type == "fedora-k8s" or cluster_type == "centos8-k8s") and k8s_docker_version == 'distro'

- name: install base distro docker for Fedora or CentOS 8
  shell: "dnf install -y moby-engine"
  args:
    warn: false
  when: (cluster_type == "fedora-k8s" or cluster_type == "centos8-k8s") and k8s_docker_version == 'distro'
  retries: 5
  delay: 10
  register: result
  until: result.rc is defined and result.rc == 0

- name: remove any updated docker-ce if it exists on Ubuntu
  command: apt-get -y remove docker docker.io containerd runc
  args:
    warn: false
  when: cluster_type == "ubuntu-k8s" and k8s_docker_version == 'distro'

- name: install base distro docker on Ubuntu
  apt:
      name: "docker.io"
      state: present
      update_cache: yes
  become : true
  when: cluster_type == "ubuntu-k8s" and k8s_docker_version == 'distro'

- name: re-configure the /etc/sysconfig/docker (where applicable) for CentOS / Fedora
  lineinfile:
    path: /etc/sysconfig/docker
    regexp: "^%OPTIONS='--selinux-enabled --log-driver=journald"
    line: "OPTIONS='--selinux-enabled --log-driver=json-file  --signature-verification=false'"
  when: k8s_docker_version == 'distro' and cluster_type != "ubuntu-k8s"
  ignore_errors: true

- name: register docker repo on CentOS 7
  command: "yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo"
  args:
    warn: false
  when: cluster_type == "centos-k8s"  and k8s_docker_version != 'distro'

- name: install docker dependencies on CentOS 7
  command: "yum install -y yum-utils device-mapper-persistent-data lvm2"
  args:
    warn: false
  when: cluster_type == "centos-k8s" and k8s_docker_version != 'distro'

- name: purge distro docker on CentOS 7
  command: "yum remove -y docker docker-client docker-client-latest docker-common docker-latest docker-latest-logrotate docker-logrotate docker-selinux"
  args:
    warn: false
  ignore_errors: true
  when: cluster_type == "centos-k8s" and k8s_docker_version != 'distro'

- name: install docker-ce and friends on CentOS 7
  shell: "yum -y install docker-ce-{{ k8s_docker_version }} docker-ce-cli-{{ k8s_docker_version }} containerd.io"
  args:
    warn: false
  when: cluster_type == "centos-k8s" and k8s_docker_version != 'distro'
  retries: 5
  delay: 10
  register: result
  until: result.rc is defined and result.rc == 0

- name: register docker repo on Fedora
  command: "dnf config-manager --add-repo https://download.docker.com/linux/fedora/docker-ce.repo"
  args:
    warn: false
  when: cluster_type == "fedora-k8s" and k8s_docker_version != 'distro'

- name: purge distro docker on Fedora
  command: "dnf -y remove docker docker-client moby-engine docker-client-latest docker-common docker-latest docker-latest-logrotate docker-logrotate docker-selinux"
  args:
    warn: false
  ignore_errors: true
  when: cluster_type == "fedora-k8s" and k8s_docker_version != 'distro'

- name: install docker-ce and friends on Fedora
  shell: "dnf -y install docker-ce-{{ k8s_docker_version }} docker-ce-cli-{{ k8s_docker_version }} containerd.io"
  args:
    warn: false
  when: cluster_type == "fedora-k8s" and k8s_docker_version != 'distro'
  retries: 5
  delay: 10
  register: result
  until: result.rc is defined and result.rc == 0

- name: register docker repo on CentOS 8
  command: "dnf config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo"
  when: cluster_type == "centos8-k8s" and k8s_docker_version != 'distro'

- name: purge distro docker on CentOS 8
  command: "dnf -y remove docker docker-client docker-client-latest docker-common docker-latest docker-latest-logrotate docker-logrotate docker-selinux"
  ignore_errors: true
  when: cluster_type == "centos8-k8s" and k8s_docker_version != 'distro'

- name: install docker-ce and friends on CentOS 8
  shell: "dnf -y install --nobest docker-ce docker-ce-cli containerd.io"
  args:
    warn: false
  when: cluster_type == "centos8-k8s" and k8s_docker_version != 'distro'

- name: install docker repo dependencies
  shell: "apt-get -y install apt-transport-https ca-certificates curl software-properties-common"
  args:
    warn: false
  when: cluster_type == "ubuntu-k8s"  and k8s_docker_version != 'distro'
  retries: 5
  delay: 5
  register: result
  until: result.rc is defined and result.rc == 0

- name: install docker repo key on Ubuntu
  shell: "curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -"
  args:
    warn: false
  when: cluster_type == "ubuntu-k8s"  and k8s_docker_version != 'distro'
  retries: 5
  delay: 5
  register: result
  until: result.rc is defined and result.rc == 0

- name: register docker repo on Ubuntu
  command: 'add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable"'
  args:
    warn: false
  when: cluster_type == "ubuntu-k8s"  and k8s_docker_version != 'distro'
  retries: 5
  delay: 5
  register: result
  until: result.rc is defined and result.rc == 0

- name: update repo metadata on Ubuntu
  command: apt-get update
  args:
    warn: false
  when: cluster_type == "ubuntu-k8s"  and k8s_docker_version != 'distro'
  retries: 5
  delay: 5
  register: result
  until: result.rc is defined and result.rc == 0

- name: purge distro docker on Ubuntu
  command: "apt-get -y remove docker docker.io containerd runc"
  args:
    warn: false
  ignore_errors: true
  when: cluster_type == "ubuntu-k8s" and k8s_docker_version != 'distro'
  retries: 5
  delay: 5
  register: result
  until: result.rc is defined and result.rc == 0

- name: install containerd on Ubuntu
  apt:
      name: "containerd.io"
      state: present
      update_cache: yes
  become : true
  when: cluster_type == "ubuntu-k8s" and k8s_docker_version != 'distro'

- name: prep /etc/docker 
  shell: "mkdir /etc/docker"
  when: (cluster_type == "centos8-k8s" and k8s_docker_version != 'distro') 

- name: configure the default k8s docker daemon.json with json-file logging
  template:
    src: templates/k8s-docker-daemon.j2
    dest: /etc/docker/daemon.json
  when: cluster_type != "ubuntu-k8s" and k8s_docker_version != 'distro'

- name: configure the default k8s /etc/sysconfig/docker settings for Fedora
  template:
    src: templates/k8s-sysconfig-docker.j2
    dest: /etc/sysconfig/docker
  when: cluster_type == "fedora-k8s" and k8s_docker_version == 'distro'

- name: configure the default k8s /etc/docker/daemon.json settings for Fedora
  template:
    src: templates/k8s-docker-daemon-fedora-distro.j2
    dest: /etc/docker/daemon.json
  when: cluster_type == "fedora-k8s" and k8s_docker_version == 'distro'

- name: configure the default k8s docker daemon.json with json-file logging on ubuntu
  template:
    src: templates/k8s-docker-daemon-ubuntu.j2
    dest: /etc/docker/daemon.json
  when: cluster_type == "ubuntu-k8s"

- name: start docker daemon
  service:
    name: docker
    state: restarted
    enabled: yes
  when: (cluster_type == "centos8-k8s" and k8s_docker_version != 'distro') or cluster_type != "centos8-k8s"

- name: show docker info 
  command: "docker info"
  register: docker_info

- debug: msg="{{ docker_info.stdout_lines }}"

- name: install k8s version lock (CentOS)
  shell: "yum install yum-plugin-versionlock"
  args:
    warn: false
  register: k8s_install_lock
  when: cluster_type == "centos-k8s"
  retries: 5
  delay: 10
  until: k8s_install_lock.rc is defined and k8s_install_lock.rc == 0

- debug: msg="{{ k8s_install_lock.stdout_lines }}"
  when: cluster_type == "centos-k8s"

- name: install k8s versionlock plugin for DNF (Fedora / CentOS 8)
  shell: "dnf -y install python3-dnf-plugin-versionlock"
  args:
    warn: false
  register: k8s_install_lock
  when: cluster_type == "fedora-k8s" or cluster_type == "centos8-k8s"
  retries: 5
  delay: 10
  until: k8s_install_lock.rc is defined and k8s_install_lock.rc == 0
  
- debug: msg="{{ k8s_install_lock.stdout_lines }}"
  when: cluster_type == "fedora-k8s" or cluster_type == "centos8-k8s"

- name: version lock docker-ce (CentOS)
  shell: "yum -y versionlock docker-ce-{{ k8s_docker_version }} docker-ce-cli-{{ k8s_docker_version }} containerd.io"
  args:
    warn: false
  register: docker_install_lock_version
  when: cluster_type == "centos-k8s"
  retries: 5
  delay: 10
  until: docker_install_lock_version.rc is defined and docker_install_lock_version.rc == 0

- debug: msg="{{ docker_install_lock_version.stdout_lines }}"
  when: cluster_type == "centos-k8s"

- name: lock docker-ce (Fedora / CentOS 8)
  shell: "dnf -y versionlock docker-ce-{{ k8s_docker_version }} docker-ce-cli-{{ k8s_docker_version }} containerd.io"
  args:
    warn: false
  register: docker_install_lock_version
  when: cluster_type == "fedora-k8s" or cluster_type == "centos8-k8s"

- debug: msg="{{ docker_install_lock_version.stdout_lines }}"
  when: cluster_type == "fedora-k8s" or cluster_type == "centos8-k8s"

- name: lock docker-ce (Ubuntu)
  shell: "apt-mark hold docker-ce={{ k8s_docker_version }}"
  args:
    warn: false
  register: docker_install_lock
  when: cluster_type == "ubuntu-k8s" and k8s_docker_version != 'distro'
  
- debug: msg="{{ docker_install_lock.stdout_lines }}"
  when: cluster_type == "ubuntu-k8s" and k8s_docker_version != 'distro'
