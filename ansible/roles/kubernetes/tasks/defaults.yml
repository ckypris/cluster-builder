- name: set k8s_version default
  set_fact:
    k8s_version: 1.14.*
  run_once: true
  when: k8s_version is undefined

- debug: msg="{{ k8s_version }}"
  run_once: true

- name: set k8s_docker_version default for CentOS 7
  set_fact:
    k8s_docker_version: distro
  run_once: true
  when: k8s_docker_version is undefined and cluster_type == 'centos-k8s'

- name: set k8s_docker_version default for CentOS 8
  set_fact:
    k8s_docker_version: 18.06.*
  run_once: true
  when: k8s_docker_version is undefined and cluster_type == 'centos8-k8s'

- name: set k8s_docker_version default for Fedora
  set_fact:
    k8s_docker_version: 19.03.*
  run_once: true
  when: k8s_version is not search("1.12") and k8s_docker_version is undefined and cluster_type == 'fedora-k8s'

- name: set k8s_docker_version default for Fedora
  set_fact:
    k8s_docker_version: distro
  run_once: true
  when: k8s_version is search("1.12") and k8s_docker_version is undefined and cluster_type == 'fedora-k8s'

- name: set k8s_docker_version default for Ubuntu
  set_fact:
    k8s_docker_version: distro
  run_once: true
  when: k8s_version is not search("1.12") and k8s_docker_version is undefined and cluster_type == 'ubuntu-k8s'

- name: set k8s_docker_version default for Ubuntu
  set_fact:
    k8s_docker_version: 18.06.*
  run_once: true
  when: k8s_docker_version is undefined and cluster_type == 'ubuntu-k8s'

- debug: msg="{{ k8s_docker_version }}"
  run_once: true

- name: set k8s_semantic_version default for 1.15
  set_fact:
    k8s_semantic_version: 1.15.4
  run_once: true
  when: k8s_version == "1.15.*"

- name: set k8s_semantic_version default for 1.14
  set_fact:
    k8s_semantic_version: 1.14.7
  run_once: true
  when: k8s_version == "1.14.*"

- name: set k8s_semantic_version default for 1.13
  set_fact:
    k8s_semantic_version: 1.13.11
  run_once: true
  when: k8s_version == "1.13.*"

- name: set k8s_semantic_version default for 1.12
  set_fact:
    k8s_semantic_version: 1.12.10
  run_once: true
  when: k8s_version == "1.12.*"

- name: set k8s_semantic_version default
  set_fact:
    k8s_semantic_version: 1.13.6
  run_once: true
  when: k8s_semantic_version is undefined

- debug: msg="{{ k8s_semantic_version }}"
  run_once: true

- name: set k8s_network_cni default
  set_fact:
    k8s_network_cni: "canal"
  run_once: true
  when: k8s_network_cni is undefined

- debug: msg="{{ k8s_network_cni }}"
  run_once: true

- name: set k8s_cluster_cidr default for Canal CNI
  set_fact:
    k8s_cluster_cidr: 10.244.0.0/16
  run_once: true
  when: k8s_cluster_cidr is undefined and k8s_network_cni == "canal"

- name: set k8s_cluster_cidr default for Calico CNI
  set_fact:
    k8s_cluster_cidr: 10.244.0.0/16
  run_once: true
  when: k8s_cluster_cidr is undefined and (k8s_network_cni == "calico" or k8s_network_cni == "calico-policy")

- debug: msg="{{ k8s_cluster_cidr }}"
  run_once: true

- name: set k8s_calico_version default
  set_fact:
    k8s_calico_version: "v3.5"
  run_once: true
  when: k8s_calico_version is undefined and 
    k8s_version is not search("1.16") and
    k8s_version is not search("1.12")

- name: set k8s_calico_version default
  set_fact:
    k8s_calico_version: "v3.3"
  run_once: true
  when: k8s_calico_version is undefined and k8s_version is search("1.12")

- name: set k8s_calico_version default
  set_fact:
    k8s_calico_version: "v3.10"
  run_once: true
  when: k8s_calico_version is undefined and k8s_version is search("1.16")

- debug: msg="{{ k8s_calico_version }}"
  run_once: true

- name: set k8s_nginx_version default
  set_fact:
    k8s_nginx_version: "nginx-0.21.0"
  run_once: true
  when: k8s_version is search("1.12") or k8s_version is search("1.13")

- name: set k8s_nginx_version default
  set_fact:
    k8s_nginx_version: "master"
  run_once: true
  when: k8s_version is not search("1.12") and k8s_version is not search("1.13")

- debug: msg="{{ k8s_nginx_version }}"
  run_once: true

- name: set k8s_ingress_controller default for NGINX
  set_fact:
    k8s_ingress_controller: nginx
  run_once: true
  when: k8s_ingress_controller is undefined

- debug: msg="{{ k8s_ingress_controller }}"
  run_once: true

- name: set k8s_calico_node_wait_min default
  set_fact:
    k8s_calico_node_wait_min: 3
  run_once: true
  when: k8s_calico_node_wait_min is undefined

- debug: msg="k8s_calico_node_wait_min -> {{ k8s_calico_node_wait_min }}"
  run_once: true

- name: set k8s_calico_policy_wait_min default
  set_fact:
    k8s_calico_policy_wait_min: 5
  run_once: true
  when: k8s_calico_policy_wait_min is undefined

- debug: msg="k8s_calico_policy_wait_min -> {{ k8s_calico_policy_wait_min }}"
  run_once: true

- name: set k8s_worker_wait_min default
  set_fact:
    k8s_worker_wait_min: 1
  run_once: true
  when: k8s_worker_wait_min is undefined

- debug: msg="k8s_worker_wait_min -> {{ k8s_worker_wait_min }}"
  run_once: true

- name: set k8s_knative_wait_min default
  set_fact:
    k8s_knative_wait_min: 5
  run_once: true
  when: k8s_knative_wait_min is undefined

- debug: msg="k8s_knative_wait_min -> {{ k8s_knative_wait_min }}"
  run_once: true

- name: set k8s_cni_wait_min default
  set_fact:
    k8s_cni_wait_min: 5
  run_once: true
  when: k8s_cni_wait_min is undefined and k8s_network_cni == "canal"

- debug: msg="k8s_cni_wait_min -> {{ k8s_cni_wait_min }}"
  run_once: true
  when: k8s_cni_wait_min is undefined and k8s_network_cni == "canal"

- name: set k8s_cni_wait_min default
  set_fact:
    k8s_cni_wait_min: 7
  run_once: true
  when: k8s_cni_wait_min is undefined and k8s_network_cni != "canal"

- debug: msg="k8s_cni_wait_min -> {{ k8s_cni_wait_min }}"
  run_once: true
  when: k8s_cni_wait_min is undefined and k8s_network_cni != "canal"

- name: set k8s_workloads_on_master default
  set_fact:
    k8s_workloads_on_master: false
  run_once: true
  when: k8s_workloads_on_master is undefined

- debug: msg="k8s_workloads_on_master -> {{ k8s_workloads_on_master }}"
  run_once: true

- name: set k8s_coredns_loop_check_disable default
  set_fact:
    k8s_coredns_loop_check_disable: false
  run_once: true
  when: k8s_coredns_loop_check_disable is undefined

- debug: msg="{{ k8s_coredns_loop_check_disable }}"
  run_once: true

- name: set k8s_firewalld_enabled default
  set_fact:
    k8s_firewalld_enabled: false
  run_once: true
  when: k8s_firewalld_enabled is undefined

- debug: msg="{{ k8s_firewalld_enabled }}"
  run_once: true

- name: set k8s_metallb_version default
  set_fact:
    k8s_metallb_version: 0.8.1
  run_once: true
  when: k8s_metallb_version is undefined

- debug: msg="{{ k8s_metallb_version }}"
  run_once: true

- name: generate k8s_encryption_key default
  shell: "head -c 32 /dev/urandom | base64 -i -"
  register: generated_encryption_key
  run_once: true
  when: k8s_encryption_key is undefined

- debug: msg="{{ generated_encryption_key }}"
  when: k8s_encryption_key is undefined
  run_once: true

- name: set k8s_encryption_key default
  set_fact:
    k8s_encryption_key: "{{ generated_encryption_key.stdout }}"
  run_once: true
  when: k8s_encryption_key is undefined

- debug: msg="{{ k8s_encryption_key }}"
  run_once: true

- name: set k8s_container_runtime default
  set_fact:
    k8s_container_runtime: docker
  run_once: true
  when: k8s_container_runtime is undefined 

- debug: msg="{{ k8s_container_runtime }}"
  run_once: true

- name: set k8s_install_dashboard default
  set_fact:
    k8s_install_dashboard: true
  run_once: true
  when: k8s_install_dashboard is undefined 

- debug: msg="{{ k8s_install_dashboard }}"
  run_once: true

- name: set k8s_advertise_addr default
  set_fact:
    k8s_advertise_addr: 127.0.0.1
  run_once: true
  when: k8s_advertise_addr is undefined 

- debug: msg="{{ k8s_advertise_addr }}"
  run_once: true
