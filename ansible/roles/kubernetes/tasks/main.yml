- name: configure common defaults 
  include: common.yml
  when: "'k8s_masters' in group_names and inventory_hostname == groups['k8s_masters'][0]"

- name: remove the updated docker-ce
  yum:
    name: docker-ce
    state: absent
  when: cluster_type != "fedora-k8s"

- name: remove any existing daemon.json
  shell: rm /etc/docker/daemon.json
  ignore_errors: true
  when: cluster_type != "fedora-k8s"

- name: install base distro docker for CentOS
  yum:
    name: docker
    state: present
  when: cluster_type != "fedora-k8s"

- name: install base distro docker for Fedora
  dnf:
    name: docker
    state: present
  when: cluster_type == "fedora-k8s"

- name: start docker daemon
  service:
    name: docker
    state: started
    enabled: yes

- name: disable firewalld 
  service:
    name: firewalld
    state: stopped
    enabled: no

- name: configure sysctl for ip4
  lineinfile:
    path: "/etc/sysctl.conf"
    state: present
    regexp: '^net.bridge.bridge-nf-call-iptables =\s'
    line: 'net.bridge.bridge-nf-call-iptables = 1'
  
- name: configure sysctlfor ip6
  lineinfile:
    path: "/etc/sysctl.conf"
    state: present
    regexp: '^net.bridge.bridge-nf-call-ip6tables =\s'
    line: 'net.bridge.bridge-nf-call-ip6tables = 1'

- name: configure sysctl for ip4
  shell: sysctl net.bridge.bridge-nf-call-iptables=1

#- name: configure sysctl forwarding ip4
#  shell: sysctl net.ipv4.conf.all.forwarding=1
    
- name: attempt to reconfigure sysctl net.bridge.bridge-nf-call-iptables
  shell: sysctl -p /etc/sysctl.conf

- name: add iptables forwarding rule for modern docker
  shell: iptables -P FORWARD ACCEPT

- name: turn swap off
  shell: swapoff -a

- name: remove Swap from fstab
  lineinfile:
    path: /etc/fstab
    state: absent
    regexp: '^/dev/mapper/system-swap'

- name: install iSCSI utils for CentOS
  yum: > 
    pkg={{item}} 
    state=present
  with_items:
    - iscsi-initiator-utils
  when: cluster_type != "fedora-k8s"

- name: install iSCSI utils for Fedora
  dnf: > 
    pkg={{item}} 
    state=present
  with_items:
    - iscsi-initiator-utils
  when: cluster_type == "fedora-k8s"

- name: ensure the iSCSId daemon is running and enabled on the nodes
  shell: systemctl enable iscsid && systemctl start iscsid

- name: configure the Kubernetes Repo
  become: true
  template:
    src: templates/k8s-repo.j2
    dest: /etc/yum.repos.d/kubernetes.repo

- name: disable GPG check on repo due to issues with the K8s source repo.
  lineinfile:
    dest: /etc/yum.repos.d/kubernetes.repo
    line: "{{ item.line }}"
    state: present
  with_items:
    - { line: 'repo_gpgcheck=0' }

#- name: Disable SELinux
#  lineinfile:
#    path: "/etc/sysconfig/selinux"
#    state: present
#    regexp: '^SELINUX'
#    line: 'SELINUX=disabled'

- name: configure the Kubernetes Repo
  shell: setenforce 0
  when: cluster_type != "fedora-k8s"

- name: install Kubernetes on all the nodes
  include: k8s-install.yml

- name: configure the first Kubernetes master
  include: masters-first.yml
  when: "'k8s_masters' in group_names
    and inventory_hostname == groups['k8s_masters'][0]"

- name: configure the remaining Kubernetes masters
  include: masters-next.yml
  when: "'k8s_masters' in group_names
    and inventory_hostname != groups['k8s_masters'][0]"

- name: install the CNI
  include: cni.yml
  when: "'k8s_masters' in group_names
    and inventory_hostname == groups['k8s_masters'][0]"

- name: install workaround patches for Kubernetes
  include: patch.yml
  when: "'k8s_masters' in group_names
    and inventory_hostname == groups['k8s_masters'][0]"

- name: wait for CoreDNS and CNI to be healthy
  pause:
    minutes: 1

- name: display cluster master node status
  shell: kubectl get nodes
  register: final_nodes_out
  when: "'k8s_masters' in group_names
    and inventory_hostname == groups['k8s_masters'][0]"

- debug: msg="{{ final_nodes_out.stdout_lines }}"
  when: "'k8s_masters' in group_names
    and inventory_hostname == groups['k8s_masters'][0]"

- name: configure the Kubernetes workers
  include: workers.yml
  when: "'k8s_workers' in group_names"

- name: wait for the worker nodes to connect to the Master control plane and initialize
  pause:
    minutes: 2
    
- name: configure Calico CNI Network Policy 
  include: cni-calico-policy.yml
  when: k8s_network_cni == 'calico-policy' and 'k8s_masters' in group_names
    and inventory_hostname == groups['k8s_masters'][0]

- name: give the Calico CNI time to reconcile
  pause:
    minutes: 5
  when: k8s_network_cni == 'calico-policy' and 'k8s_masters' in group_names
    and inventory_hostname == groups['k8s_masters'][0]

- name: configure ingress and load balancing 
  include: ingress.yml
  when: "'k8s_masters' in group_names
    and inventory_hostname == groups['k8s_masters'][0]"

- name: display cluster worker node status
  shell: kubectl get nodes
  register: final_nodes_out
  when: "'k8s_masters' in group_names
    and inventory_hostname == groups['k8s_masters'][0]"

- debug: msg="{{ final_nodes_out.stdout_lines }}"
  when: "'k8s_masters' in group_names
    and inventory_hostname == groups['k8s_masters'][0]"

- name: configure the Kubernetes Dashboard 
  include: kubernetes-dashboard.yml
  when: "'k8s_masters' in group_names
    and inventory_hostname == groups['k8s_masters'][0]"

- name: configure log rotation
  become: true
  template:
    src: templates/k8s-log-rotation.j2
    dest: /etc/logrotate.d/containers

- name: list cluster nodes
  shell: kubectl get nodes
  register: final_nodes_out
  when: "'k8s_masters' in group_names
    and inventory_hostname == groups['k8s_masters'][0]"

- debug: msg="{{ final_nodes_out.stdout_lines }}"
  when: "'k8s_masters' in group_names
    and inventory_hostname == groups['k8s_masters'][0]"

- name: list all running pods
  shell: kubectl get pods --all-namespaces
  register: final_pods_out
  when: "'k8s_masters' in group_names
    and inventory_hostname == groups['k8s_masters'][0]"

- debug: msg="{{ final_pods_out.stdout_lines }}"
  when: "'k8s_masters' in group_names
    and inventory_hostname == groups['k8s_masters'][0]"

- name: list all services
  shell: kubectl get svc --all-namespaces
  register: final_svc_out
  when: "'k8s_masters' in group_names
    and inventory_hostname == groups['k8s_masters'][0]"

- debug: msg="{{ final_svc_out.stdout_lines }}"
  when: "'k8s_masters' in group_names
    and inventory_hostname == groups['k8s_masters'][0]"
