- name: apply default k8s settings
  include: defaults.yml
  run_once: true

- name: ensure netfilter is loaded
  shell: modprobe br_netfilter

- name: enable ipv4 forwarding
  sysctl:
    name: net.ipv4.ip_forward  
    value: 1
    state: present

- name: enable changes
  shell: sysctl -w net.ipv4.route.flush=1

- name: apply docker settings
  include: cri-docker.yml
  when: k8s_container_runtime != 'cri-o'

- name: apply crio settings
  include: cri-crio.yml
  when: k8s_container_runtime == 'cri-o'

- name: configure firewalld for kubernetes (optional)
  include: firewalld.yml
  when: k8s_firewalld_enabled|bool == True

- name: disable firewalld
  service:
    name: firewalld
    state: stopped
    enabled: no
  when: k8s_firewalld_enabled|bool != True

- name: turn swap off
  shell: swapoff -a

- name: remove swap from fstab
  lineinfile:
    path: /etc/fstab
    state: absent
    regexp: '^/dev/mapper/system-swap'

- name: install iSCSI utils for CentOS 7
  yum: > 
    pkg=iscsi-initiator-utils 
    state=present
  when: cluster_type == "centos-k8s"
  retries: 50
  delay: 5
  register: result
  until: result.rc is defined and result.rc == 0

- name: install iSCSI utils for Fedora / CentOS 8
  shell: "dnf install -y iscsi-initiator-utils"
  args:
    warn: false
  when: cluster_type == "fedora-k8s" or cluster_type == "centos8-k8s"
  retries: 50
  delay: 5
  register: result
  until: result.rc is defined and result.rc == 0
 
- name: read node iscsi initiator value  
  shell: CODE=`cat /etc/iscsi/initiatorname.iscsi` && echo ${CODE//InitiatorName=/}
  register: vm_initiator_code

- debug: msg="{{ vm_initiator_code.stdout }}"

- name: ensure the iSCSId daemon is running and enabled on the nodes
  shell: systemctl enable iscsid && systemctl start iscsid

- name: configure the Kubernetes repo
  become: true
  template:
    src: templates/k8s-repo.j2
    dest: /etc/yum.repos.d/kubernetes.repo

- name: disable GPG check on repo due to issues with the K8s source repo.
  lineinfile:
    dest: /etc/yum.repos.d/kubernetes.repo
    line: "{{ item.line }}"
    state: present
  with_items:
    - { line: 'repo_gpgcheck=0' }

- name: install Kubernetes on all the nodes
  include: k8s-install.yml

- name: configure the first Kubernetes master
  include: masters-first.yml
  when: "'k8s_masters' in group_names
    and inventory_hostname == groups['k8s_masters'][0]"

- name: configure the remaining Kubernetes masters
  include: masters-next.yml
  when: "'k8s_masters' in group_names
    and inventory_hostname != groups['k8s_masters'][0]"

- name: install the CNI
  include: cni.yml
  when: "'k8s_masters' in group_names
    and inventory_hostname == groups['k8s_masters'][0]"

- name: encrypt the Kubernetes secrets
  include: secrets.yml
  when: "'k8s_masters' in group_names"

- name: install workaround patches for Kubernetes
  include: patch.yml
  when: "'k8s_masters' in group_names
    and inventory_hostname == groups['k8s_masters'][0]"

- name: display cluster master node status
  shell: kubectl get nodes
  register: final_nodes_out
  when: "'k8s_masters' in group_names
    and inventory_hostname == groups['k8s_masters'][0]"

- debug: msg="{{ final_nodes_out.stdout_lines }}"
  when: "'k8s_masters' in group_names
    and inventory_hostname == groups['k8s_masters'][0]"

- name: remove the master taints (1.14+)
  shell: kubectl taint nodes --all node-role.kubernetes.io/master-
  become: true
  when: "(k8s_workloads_on_master|bool == True) and inventory_hostname == groups['k8s_masters'][0]"
  ignore_errors: true

- name: remove the master taints (pre 1.14)
  shell: kubectl taint nodes --all node.kubernetes.io/unschedulable:NoSchedule-
  become: true
  when: "(k8s_workloads_on_master|bool == True) and inventory_hostname == groups['k8s_masters'][0]"
  ignore_errors: true

- name: remove the master taints (legacy)
  shell:   kubectl taint nodes --all kubeadmNode-
  become: true
  when: "(k8s_workloads_on_master|bool == True) and inventory_hostname == groups['k8s_masters'][0]"
  ignore_errors: true

- name: configure the Kubernetes workers
  include: workers.yml
  when: "'k8s_workers' in group_names"

- name: configure ingress and load balancing 
  include: ingress.yml
  when: "'k8s_masters' in group_names
    and inventory_hostname == groups['k8s_masters'][0]"

- name: configure the Kubernetes Dashboard 1.x
  include: kubernetes-dashboard-1.yml
  when: "'k8s_masters' in group_names
    and inventory_hostname == groups['k8s_masters'][0]
    and (k8s_version is search('1.12') or k8s_version is search('1.13') or  k8s_version is search('1.14'))"
    
- name: configure the Kubernetes Dashboard 2.x
  include: kubernetes-dashboard-2.yml
  when: "'k8s_masters' in group_names
    and inventory_hostname == groups['k8s_masters'][0]
    and (k8s_version is search('1.15') or  k8s_version is search('1.16'))"

- name: display cluster worker node status
  shell: kubectl get nodes
  register: final_nodes_out
  when: "'k8s_masters' in group_names
    and inventory_hostname == groups['k8s_masters'][0]"

- debug: msg="{{ final_nodes_out.stdout_lines }}"
  when: "'k8s_masters' in group_names
    and inventory_hostname == groups['k8s_masters'][0]"

- name: configure log rotation
  become: true
  template:
    src: templates/k8s-log-rotation.j2
    dest: /etc/logrotate.d/containers

- name: list cluster nodes
  shell: kubectl get nodes
  register: final_nodes_out
  when: "'k8s_masters' in group_names
    and inventory_hostname == groups['k8s_masters'][0]"

- debug: msg="{{ final_nodes_out.stdout_lines }}"
  when: "'k8s_masters' in group_names
    and inventory_hostname == groups['k8s_masters'][0]"

- name: list all running pods
  shell: kubectl get pods --all-namespaces
  register: final_pods_out
  when: "'k8s_masters' in group_names
    and inventory_hostname == groups['k8s_masters'][0]"

- debug: msg="{{ final_pods_out.stdout_lines }}"
  when: "'k8s_masters' in group_names
    and inventory_hostname == groups['k8s_masters'][0]"

- name: list all services
  shell: kubectl get svc --all-namespaces
  register: final_svc_out
  when: "'k8s_masters' in group_names
    and inventory_hostname == groups['k8s_masters'][0]"

- debug: msg="{{ final_svc_out.stdout_lines }}"
  when: "'k8s_masters' in group_names
    and inventory_hostname == groups['k8s_masters'][0]"
