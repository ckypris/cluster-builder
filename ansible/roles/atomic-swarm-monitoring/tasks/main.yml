---
- name: Stop cadvisor on all nodes 
  shell: docker stop cadvisor
  ignore_errors: true

- name: Remove cadvisor on all nodes 
  shell: docker rm cadvisor
  ignore_errors: true

- name: Stop node-exporter on all nodes 
  shell: docker stop node-exporter
  ignore_errors: true

- name: Remove node-exporter on all nodes 
  shell: docker rm node-exporter
  ignore_errors: true

- name: Install cadvisor on all nodes 
  shell: 
    cmd: | 
      docker run \
        --name=cadvisor \
        --privileged=true \
        --restart=always \
        --volume=/cgroup:/cgroup:ro \
        --volume=/:/rootfs:ro \
        --volume=/var/run:/var/run:rw \
        --volume=/sys:/sys:ro \
        --volume=/var/lib/docker/:/var/lib/docker:ro \
        --volume=/dev/disk/:/dev/disk:ro \
        --publish=9101:8080 \
        --detach \
        google/cadvisor:latest    

- name: Install node-exporter 
  shell: 
    cmd: | 
      docker \
        run  \
          --name node-exporter \
          --privileged=true \
          --restart=always \
          --volume=/proc:/host/proc:ro \
          --volume=/sys:/host/sys:ro \
          --volume=/:/rootfs:ro \
          --volume=/etc/hostname:/etc/host_hostname:ro \
          -e HOST_HOSTNAME=/etc/host_hostname \
          --publish=9100:9100 \
          --detach \
          basi/node-exporter:latest \
          --path.procfs /host/proc \
          --path.sysfs /host/sys \
          --collector.filesystem.ignored-mount-points "^/(sys|proc|dev|host|etc)($|/)" \
          --collector.textfile.directory /etc/node-exporter/  
          
- name: Establish prometheus server settings
  set_fact: 
    docker_prometheus_server: "{{ groups['docker_prometheus_server'][0] }}"
  when: docker_prometheus_server is undefined and groups['docker_prometheus_server'] is defined

- name: Create prometheus etc
  file:
    path: /etc/prometheus
    state: directory
    mode: 0755
  when: "docker_prometheus_server is defined and inventory_hostname == docker_prometheus_server"

- name: Create and install the prometheus configuration file
  template:
    src: templates/prometheus.j2
    dest: /etc/prometheus/prometheus.yml
    mode: 0644
  when: "docker_prometheus_server is defined and inventory_hostname == docker_prometheus_server"

- name: Remove any running prometheus server 
  shell: docker service rm monitor-prometheus
  when: "docker_prometheus_server is defined and inventory_hostname in groups['docker_swarm_manager']"
  ignore_errors: true

- name: Create the prometheus data volume
  shell: docker volume create prometheus-data
  when: "docker_prometheus_server is defined and inventory_hostname in groups['docker_swarm_manager']"
  ignore_errors: true

- name: Install prometheus 
  shell: 
    cmd: | 
      docker service create --replicas 1 --name monitor-prometheus \
      --limit-cpu 1 \
      --reserve-cpu 0.5 \
      --limit-memory 1073741824 \
      --reserve-memory 512m \
      --constraint "node.hostname == {{ docker_prometheus_server }}" \
      --network bridge \
      --mount type=bind,source=/etc/hosts,destination=/etc/hosts \
      --mount type=bind,source=/etc/prometheus/prometheus.yml,destination=/etc/prometheus/prometheus.yml \
      --mount source=prometheus-data,destination=/prometheus \
      --publish 9090:9090/tcp \
      --detach \
      prom/prometheus
  when: "docker_prometheus_server is defined and inventory_hostname in groups['docker_swarm_manager']"
  run_once: true

- name: Remove any running grafana server 
  shell: docker service rm monitor-grafana
  when: "docker_prometheus_server is defined and inventory_hostname in groups['docker_swarm_manager']"
  ignore_errors: true

- name: Create the grafana data volume
  shell: docker volume create grafana-data
  when: "docker_prometheus_server is defined and inventory_hostname in groups['docker_swarm_manager']"
  ignore_errors: true

- name: Install grafana 
  shell: 
    cmd: | 
      docker service create --replicas 1 --name monitor-grafana \
      --limit-cpu 1 \
      --reserve-cpu 0.5 \
      --limit-memory 1073741824 \
      --reserve-memory 536870912 \
      --network bridge \
      --constraint "node.hostname == {{ docker_prometheus_server }}" \
      --mount type=bind,source=/etc/hosts,destination=/etc/hosts \
      --mount source=grafana-data,destination=/var/lib/grafana \
      --publish 3000:3000/tcp \
      -e GF_SECURITY_ADMIN_PASSWORD=pass \
      --detach \
      grafana/grafana:latest
  when: "docker_prometheus_server is defined and inventory_hostname in groups['docker_swarm_manager']"
  run_once: true

