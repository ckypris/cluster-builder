---
- name: enable the docker daemon as a service and start it.
  service:
    name: docker
    state: started
    enabled: yes  

- name: create a custom swarm network
  docker_network:
    name: docker_gwbridge
    driver_options:
      com.docker.network.bridge.enable_icc: "false"
      com.docker.network.bridge.enable_ip_masquerade: "true"
      com.docker.network.bridge.name: docker_gwbridge
    ipam_options:
      subnet: "{{ docker_swarm_network }}"
      gateway: "{{ docker_swarm_network | ipaddr('net') | ipaddr('1') | ipaddr('ip') }}"
  tags:
    - skip_ansible_lint # Suppressing the linter
  when: docker_swarm_network is defined and docker_swarm_network | ipaddr('net')

- name: check if "Swarm Mode" is enabled.
  shell: docker info
  changed_when: False
  register: docker_info
  tags:
    - skip_ansible_lint # Suppressing the linter

- name: init "Swarm Mode" on the first manager (Combined Mgmt/Data Interface).
  shell: docker swarm init
        --listen-addr {{ docker_swarm_addr }}:{{ docker_swarm_port }}
        --advertise-addr {{ docker_swarm_addr }}
  when: "docker_info.stdout.find('Swarm: active') == -1
    and data_ip is undefined
    and inventory_hostname == groups['docker_swarm_manager'][0]"
  tags:
    - skip_ansible_lint # Suppressing the linter

- name: init "Swarm Mode" on the first manager (Separated Mgmt and Data Interface).
  shell: docker swarm init
        --listen-addr {{ docker_swarm_addr }}:{{ docker_swarm_port }}
        --advertise-addr {{ docker_swarm_addr }}
        --data-path-addr {{ data_ip }}
  when: "docker_info.stdout.find('Swarm: active') == -1
    and data_ip is defined
    and inventory_hostname == groups['docker_swarm_manager'][0]"
  tags:
    - skip_ansible_lint # Suppressing the linter

- name: get the worker join-token.
  shell: docker swarm join-token -q worker
  changed_when: False
  register: docker_worker_token
  delegate_to: "{{ groups['docker_swarm_manager'][0] }}"
  delegate_facts: True
  when: "'docker_swarm_worker' in group_names"
  tags:
    - skip_ansible_lint # Suppressing the linter

- name: get the manager join-token.
  shell: docker swarm join-token -q manager
  changed_when: False
  register: docker_manager_token
  delegate_to: "{{ groups['docker_swarm_manager'][0] }}"
  delegate_facts: True
  when: "'docker_swarm_manager' in group_names
    and inventory_hostname != groups['docker_swarm_manager'][0]"
  tags:
    - skip_ansible_lint # Suppressing the linter

- name: declare the address of the first Swarm manager as a fact.
  set_fact:
    docker_manager_address: "{{ docker_swarm_addr }}:{{ docker_swarm_port }}"
  when: "inventory_hostname == groups['docker_swarm_manager'][0]"

- debug: msg="{{ docker_manager_address }}"
  when: "inventory_hostname == groups['docker_swarm_manager'][0]"

- name: distribute the fact containing address of the first Swarm manager.
  set_fact:
    docker_manager_address: "{{hostvars[groups['docker_swarm_manager'][0]]['docker_manager_address'] }}"
  when: "inventory_hostname != groups['docker_swarm_manager'][0]"

- name: join the pending Swarm worker nodes (Combined Mgmt/Data Interface).
  shell: docker swarm join
        --listen-addr {{ docker_swarm_addr }}:{{ docker_swarm_port }}
        --advertise-addr {{ docker_swarm_addr }}
        --token "{{ docker_worker_token.stdout }}"
        {{ docker_manager_address }}
  changed_when: False
  when: "docker_info.stdout.find('Swarm: active') == -1
    and docker_info.stdout.find('Swarm: pending') == -1
    and data_ip is undefined
    and 'docker_swarm_worker' in group_names"
  tags:
    - skip_ansible_lint # Suppressing the linter

- name: join the pending Swarm manager nodes 
  shell: docker swarm join
        --listen-addr {{ docker_swarm_addr }}:{{ docker_swarm_port }}
        --advertise-addr {{ docker_swarm_addr }}
        --token "{{ docker_manager_token.stdout }}"
        {{ docker_manager_address }}
  changed_when: False
  when: "docker_info.stdout.find('Swarm: active') == -1
    and docker_info.stdout.find('Swarm: pending') == -1
    and data_ip is undefined
    and 'docker_swarm_manager' in group_names
    and inventory_hostname != groups['docker_swarm_manager'][0]"
  tags:
    - skip_ansible_lint # Suppressing the linter


- name: determine the node name when there is a network_dn
  set_fact:
    node_fqdn: "{{ node_hostname }}.{{ network_dn }}"
  when: "use_fqdn_node_name is defined"

- name: determine the node name when there is no network_dn
  set_fact:
    node_fqdn: "{{ inventory_hostname }}"
  when: "use_fqdn_node_name is undefined"

- name: get list of labels
  command: >-
        docker node inspect
        -f {% raw %}'{{range $key, $value := .Spec.Labels}}{{printf "%s\n" $key}}{{end}}'{% endraw %}
        {{ node_fqdn }}
  register: docker_swarm_labels
  changed_when: False
  delegate_to: "{{ groups['docker_swarm_manager'][0] }}"
  delegate_facts: True
  tags:
    - skip_ansible_lint
    - swarm_labels

- debug:
    msg: "Labels: {{ docker_swarm_labels.stdout_lines }}"

# This mangles existing labels on swarms, such as those placed by UCP
# need a cleaner approach for relabels, but this is mostly used
# in cluster creation.
#
#- name: Remove labels from swarm node
#  command: docker node update --label-rm {{ item }} {{ node_fqdn }}
#  with_items: "{{ docker_swarm_labels.stdout_lines }}"
#  when: "{{ docker_swarm_labels.stdout_lines | count > 0 }}"
#  changed_when: False
#  delegate_to: "{{ groups['docker_swarm_manager'][0] }}"
#  delegate_facts: True
#  tags:
#    - skip_ansible_lint
#    - swarm_labels

- name: assign labels to swarm nodes | if any
  command: docker node update --label-add {{ item }}=true {{ node_fqdn }}
  changed_when: False
  with_items:
    - "{{ swarm_labels  | default([]) }}"
  delegate_to: "{{ groups['docker_swarm_manager'][0] }}"
  delegate_facts: True
  tags:
    - skip_ansible_lint
    - swarm_labels

