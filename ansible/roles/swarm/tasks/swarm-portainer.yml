#
# Right now this just installs portainer on the first manager
# TODO: breakout the scripts for secure-api and container so they can 
# be run indendently - in case of m1 node failure, m2 or m3 can be
# provisioned for remote api and portainer access on demand

---
- name: install pip
  shell: tdnf -y install python-pip
  when: "inventory_hostname == groups['docker_swarm_manager'][0]"

- name: Install docker-py 1.9.0 to fix Ansible issue 17495
  pip:
    name: docker-py
    version: 1.9.0
    state: present
  when: "inventory_hostname == groups['docker_swarm_manager'][0]"

- name: install docker-compose python module
  pip: name={{ item }} state=latest
  with_items:
    - docker-compose
  when: "inventory_hostname == groups['docker_swarm_manager'][0]"

- name: Pull Portainer image
  shell: docker pull portainer/portainer:develop
  when: "inventory_hostname == groups['docker_swarm_manager'][0]"

- name: Stop any existing Portainer container (if running)
  shell: docker stop portainer
  ignore_errors: true
  when: "inventory_hostname == groups['docker_swarm_manager'][0]"

- name: Remove any existing Portainer container (if exists)
  shell: docker rm portainer
  ignore_errors: true
  when: "inventory_hostname == groups['docker_swarm_manager'][0]"

- name: Start Portainer the old fashioned way
  shell: docker run -d -p 9000:9000 --name portainer -v /certs:/certs -v /var/run/docker.sock:/var/run/docker.sock portainer/portainer:develop -H unix:///var/run/docker.sock --tlsverify
  ignore_errors: true
  register: portainer_start
  when: "inventory_hostname == groups['docker_swarm_manager'][0]"

- debug: msg="{{ portainer_start.stdout }}"
  when: "inventory_hostname == groups['docker_swarm_manager'][0]"

#- name: Start Portainer
#  docker_container:
#    name: portainer
#    image: portainer/portainer:develop
#    command: --tlsverify
#    ports:
#      - "9000:9000"
#    volumes:
#      - /var/run/docker.sock:/var/run/docker.sock
#      - /certs:/certs
#    state: started
#    pull: false
#    env:
#        DOCKER_TLS_VERIFY: 1
#        DOCKER_HOST: unix:///var/run/docker.sock
#  when: "'docker_swarm_manager' in group_names"
