#
# Right now this just installs portainer on the first manager
# TODO: breakout the scripts for secure-api and container so they can 
# be run indendently - in case of m1 node failure, m2 or m3 can be
# provisioned for remote api and portainer access on demand

---
- name: Install Pip
  shell: tdnf -y install python-pip
  when: "inventory_hostname == groups['docker_swarm_manager'][0]"

- name: Install docker-compose python module
  pip: name={{ item }} state=latest
  with_items:
    - docker-compose
  when: "inventory_hostname == groups['docker_swarm_manager'][0]"

- name: Pull Portainer image
  shell: docker pull portainer/portainer:develop
  when: "inventory_hostname == groups['docker_swarm_manager'][0]"

- name: Remove any existing Portainer container (if exists)
  shell: docker service rm portainer
  ignore_errors: true
  when: "inventory_hostname == groups['docker_swarm_manager'][0]"

- name: Start Portainer the old fashioned way
  shell: 
    cmd: | 
      docker service create --constraint "node.role == manager" -p 9000:9000 \
      --name portainer \
      --mount source=portainer-data,destination=/data \
      --mount type=bind,source=/etc/certs/docker,destination=/certs \
      --mount type=bind,source=/var/run/docker.sock,destination=/var/run/docker.sock \
      portainer/portainer:develop -H unix:///var/run/docker.sock --tlsverify
  ignore_errors: true
  register: portainer_start
  when: "inventory_hostname == groups['docker_swarm_manager'][0]"

- debug: msg="{{ portainer_start.stdout }}"
  when: "inventory_hostname == groups['docker_swarm_manager'][0]"

#- name: Start Portainer
#  docker_container:
#    name: portainer
#    image: portainer/portainer:develop
#    command: --tlsverify
#    ports:
#      - "9000:9000"
#    volumes:
#      - /var/run/docker.sock:/var/run/docker.sock
#      - /etc/certs/docker:/certs
#    state: started
#    pull: false
#    env:
#        DOCKER_TLS_VERIFY: 1
#        DOCKER_HOST: unix:///var/run/docker.sock
#  when: "'docker_swarm_manager' in group_names"
