---
- hosts: all
  gather_facts: false

  vars:
    fusion_vm_folder: ../virtuals
    ova_template_path: "{{ ova_template }}"
    gen_script_folder: ../tmp

  tasks:    
  - name: Ensure the target fusion_vm_folder exists
    local_action:
      module: file
      path: "{{ fusion_vm_folder }}"
      state: directory

  - name: Ensure the target folder for generated scripts exists
    local_action:
      module: file
      path: "{{ gen_script_folder }}"
      state: directory

  - name: Stop the existing VMs.
    local_action:
      module: shell
      _raw_params: vmrun stop {{ fusion_vm_folder }}/{{ inventory_hostname }}.vmwarevm/{{ inventory_hostname }}.vmx
    ignore_errors: true

  - name: Use ovftool to deploy cluster-node ova to Fusion VMX.
    local_action:
      module: shell
      _raw_params: ovftool -tt=vmx -o --network={{ fusion_net }} --powerOffTarget --name={{ inventory_hostname }} {{ ova_template_path }} {{ fusion_vm_folder }}/
  
  - name: Assign the VM CPU Count
    local_action:
      module: lineinfile
      path: "{{ fusion_vm_folder }}/{{ inventory_hostname }}.vmwarevm/{{ inventory_hostname }}.vmx"
      state: present
      regexp: '^numvcpus =\s'
      line: 'numvcpus = "{{ numvcpus }}"'
    when: numvcpus is defined

  - name: Assign the VM Memory
    local_action:
      module: lineinfile
      path: "{{ fusion_vm_folder }}/{{ inventory_hostname }}.vmwarevm/{{ inventory_hostname }}.vmx"
      state: present
      regexp: '^memsize =\s'
      line: 'memsize = "{{ memsize }}"'
    when: memsize is defined

  - name: Start the VMs to get the generated MAC addresses
    local_action:
      module: shell
      _raw_params: vmrun start {{ fusion_vm_folder }}/{{ inventory_hostname }}.vmwarevm/{{ inventory_hostname }}.vmx nogui
    become: false
    
  - name: Scan the VMX files for the mac addresses
    local_action:
      module: shell
      _raw_params: cat {{ fusion_vm_folder }}/{{ inventory_hostname }}.vmwarevm/{{ inventory_hostname }}.vmx | grep "ethernet0.generatedAddress = " | sed -e 's/ethernet0.generatedAddress = //g' -e 's/"//g'
    register: vm_mac
  
  - debug: msg="{{ vm_mac.stdout }}"

  - name: Generate the DHCPD configuration entries
    local_action:
      module: template
      src: templates/dhcpd_entry.j2
      dest: "{{ gen_script_folder }}/{{ inventory_hostname }}_dhcpd.conf"
  
  - name: Stop the VMs 
    local_action:
      module: shell
      _raw_params: vmrun stop {{ fusion_vm_folder}}/{{ inventory_hostname }}.vmwarevm/{{ inventory_hostname }}.vmx nogui

  - name: Assign the Fusion Network Connection Type
    local_action:
      module: lineinfile
      path: "{{ fusion_vm_folder }}/{{ inventory_hostname }}.vmwarevm/{{ inventory_hostname }}.vmx"
      state: present
      regexp: '^ethernet0.connectionType =\s'
      line: 'ethernet0.connectionType = "{{ fusion_net_type }}"'

  - name: Assign the Fusion Network
    local_action:
      module: lineinfile
      path: "{{ fusion_vm_folder }}/{{ inventory_hostname }}.vmwarevm/{{ inventory_hostname }}.vmx"
      state: present
      regexp: '^ethernet0.vnet =\s'
      line: 'ethernet0.vnet = "{{ fusion_net }}"'

  - name: Remove the DHCPD fragment file
    local_action:
      module: shell
      _raw_params: rm {{ gen_script_folder }}/dhcpd_frag.conf
    ignore_errors: true
    run_once: true

  - name: Concatenate the entry header
    local_action:
      module: shell
      _raw_params: echo '### photon-swarm:{{ cluster_name }}:start' >> {{ gen_script_folder }}/dhcpd_frag.conf
    run_once: true

  - name: Concatenate the new entries
    local_action:
      module: shell
      _raw_params: cat {{ gen_script_folder }}/{{ inventory_hostname }}_dhcpd.conf >> {{ gen_script_folder }}/dhcpd_frag.conf

  - name: Concatenate the entry footer
    local_action:
      module: shell
      _raw_params: echo '### photon-swarm:{{ cluster_name }}:end' >> {{ gen_script_folder }}/dhcpd_frag.conf
    run_once: true

  - name: Stop the VM Network
    local_action:
      module: shell
      _raw_params: /Applications/VMware\ Fusion.app/Contents/Library/vmnet-cli --stop
    delegate_to: 127.0.0.1
    become: true
    run_once: true

  - name: Remove any block for the current cluster
    local_action:
      module: shell
      _raw_params: sed '/### photon-swarm:{{ cluster_name }}:start/,/### photon-swarm:{{ cluster_name }}:end/d' /Library/Preferences/VMware\ Fusion/{{ fusion_net }}/dhcpd.conf > /Library/Preferences/VMware\ Fusion/{{ fusion_net }}/dhcpd-temp.conf
    delegate_to: 127.0.0.1
    become: true
    run_once: true

  - name: Add current DHCP block for cluster
    local_action:
      module: shell
      _raw_params: cat {{ gen_script_folder }}/dhcpd_frag.conf >> /Library/Preferences/VMware\ Fusion/{{ fusion_net }}/dhcpd-temp.conf
    delegate_to: 127.0.0.1
    become: true
    run_once: true

  - name: Backup current DHCP
    local_action:
      module: shell
      _raw_params: cp /Library/Preferences/VMware\ Fusion/{{ fusion_net }}/dhcpd.conf /Library/Preferences/VMware\ Fusion/{{ fusion_net }}/dhcpd-backup.conf
    delegate_to: 127.0.0.1
    become: true
    run_once: true

  - name: Replace current DHCP
    local_action:
      module: shell
      _raw_params: mv /Library/Preferences/VMware\ Fusion/{{ fusion_net }}/dhcpd-temp.conf /Library/Preferences/VMware\ Fusion/{{ fusion_net }}/dhcpd.conf
    delegate_to: 127.0.0.1
    become: true
    run_once: true

  - name: Start the VM Network
    local_action:
      module: shell
      _raw_params: /Applications/VMware\ Fusion.app/Contents/Library/vmnet-cli --start
    delegate_to: 127.0.0.1
    become: true
    run_once: true

  - name: Remove the DHCPD configuration file fragments
    local_action:
      module: file
      path: "{{ gen_script_folder }}/{{ inventory_hostname }}_dhcpd.conf"
      state: absent
    delegate_to: 127.0.0.1
    
  - name: Start the VMs 
    local_action:
      module: shell
      _raw_params: vmrun start {{ fusion_vm_folder}}/{{ inventory_hostname }}.vmwarevm/{{ inventory_hostname }}.vmx nogui

  - name: waiting 120 secs for servers to start up and fetch their permanent ip addresses
    local_action: wait_for host={{ inventory_hostname }} port=22 state=started delay=120 timeout=240
    become: false
