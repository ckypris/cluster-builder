- hosts: coreos
  gather_facts: False
  roles:
    - defunctzombie.coreos-bootstrap

- hosts: coreos_controllers,coreos_workers
  become: true
  any_errors_fatal: true
  gather_facts: true

  roles:
    - common
    - coreos-grub

- hosts: coreos_controllers,coreos_workers
  become: true
  any_errors_fatal: true
  gather_facts: true
  
  tasks:

    - name: Check that the static.network exists
      stat:
        path: /etc/systemd/network/static.network
      register: stat_result

    - name: Assign network_cidr as default /24 when undefined
      set_fact:
        network_cidr: "24"
      when: network_cidr is undefined 

    - name: Generate static networkd unit file
      template:
        src: templates/coreos-static-net.j2
        dest: /etc/systemd/network/static.network
        mode: 0655
      when: stat_result.stat.exists == False 

    - name: Restart with static IP assignment
      service:
        name: systemd-networkd
        state: restarted
        enabled: yes
      when: stat_result.stat.exists == False 

    - name: Verify servers are at their permanent ip addresses
      local_action: wait_for host={{ inventory_hostname }} port=22 state=started delay=5 timeout=600
      become: false
      when: stat_result.stat.exists == False 

- hosts: coreos_workers
  become: true
  any_errors_fatal: true
  gather_facts: true

  vars:

    kube_config_file: "{{ playbook_dir | replace('/ansible', '') }}/clusters/{{ cluster_pkg_folder }}/assets/auth/kubeconfig"

  roles:
    - coreos-iscsi
    - coreos-iscsi-provisioner

  tasks:

    - name: Install the iscsi-provisioner secret into the {{ cluster_name }} CoreOS cluster.
      local_action:
        module: shell
        _raw_params: "kubectl --kubeconfig {{ kube_config_file }} create secret generic {{ targetd_server_account_credentials }} --from-literal=username={{ targetd_server_account_username }} --from-literal=password={{ targetd_server_account_password }} -n {{ targetd_server_namespace }}"
      become: false
      run_once: true
      register: iscsi_secret_cmd
    
    - debug: msg="{{ iscsi_secret_cmd.stdout_lines }}"
      run_once: true

    - name: Apply the iscsi-provisioner storage class and provisioner manifests
      local_action:
        module: shell
        _raw_params: "kubectl --kubeconfig {{ kube_config_file }} apply -f ../clusters/{{ cluster_pkg_folder }}/iscsi-manifests/coreos-iscsi.yml -n {{ targetd_server_namespace }}"
      become: false
      run_once: true
      register: iscsi_prov_cmd

    - debug: msg="{{ iscsi_prov_cmd.stdout_lines }}"
      run_once: true

    - name: Verify the storage class 
      local_action:
        module: shell
        _raw_params: "kubectl --kubeconfig {{ kube_config_file }} get sc -n {{ targetd_server_namespace }}"
      become: false
      run_once: true
      register: iscsi_scv_cmd

    - debug: msg="{{ iscsi_scv_cmd.stdout_lines }}"
      run_once: true

    - name: Verify the iscsi-provisioner pod
      local_action:
        module: shell
        _raw_params: "kubectl --kubeconfig {{ kube_config_file }} get pods -n {{ targetd_server_namespace }}"
      become: false
      run_once: true
      register: iscsi_podv_cmd

    - debug: msg="{{ iscsi_podv_cmd.stdout_lines }}"
      run_once: true

    - name: Apply the open-vm-tools
      local_action:
        module: shell
        _raw_params: "kubectl --kubeconfig {{ kube_config_file }} apply -f ../xtras/coreos/open-vm-tools.yml"
      become: false
      run_once: true
      register: vm_tools_cmd

    - debug: msg="{{ vm_tools_cmd.stdout_lines }}"
      run_once: true
