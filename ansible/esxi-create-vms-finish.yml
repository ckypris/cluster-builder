---
- hosts: all
  gather_facts: false
  vars:
    gen_script_folder: ../tmp/{{ cluster_name }}
  tasks:  
  - name: Ensure the target folder for generated scripts exists
    local_action:
      module: file
      path: "{{ gen_script_folder }}"
      state: directory

  - name: Scan the VMS for the VM ID
    local_action:
      module: shell
      _raw_params: ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null {{ esxi_user }}@{{ esxi_host }} vim-cmd vmsvc/getallvms | grep {{ inventory_hostname }} | cut -d" " -f1
    register: vm_id
  
  - debug: msg="{{ vm_id.stdout }}"

  - name: Stop the VMs
    local_action:
      module: shell
      _raw_params: ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null {{ esxi_user }}@{{ esxi_host }} vim-cmd vmsvc/power.off {{ vm_id.stdout }} 
    when: vm_id.stdout is defined

  - name: Adjust the memSize value on the ESXi VM
    local_action:
      module: shell
      _raw_params: ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null {{ esxi_user }}@{{ esxi_host }} "sed '/memSize/s/.*/memSize\ =\ \"{{ memsize }}\"/' /vmfs/volumes/{{ esxi_ds }}/{{ inventory_hostname }}/{{ inventory_hostname }}.vmx > /vmfs/volumes/{{ esxi_ds }}/{{ inventory_hostname }}/{{ inventory_hostname }}.vmx-adjusted"
    when: memsize is defined

  - name: Copy the adjusted vmx into place
    local_action:
      module: shell
      _raw_params: ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null {{ esxi_user }}@{{ esxi_host }} "cp /vmfs/volumes/{{ esxi_ds }}/{{ inventory_hostname }}/{{ inventory_hostname }}.vmx-adjusted /vmfs/volumes/{{ esxi_ds }}/{{ inventory_hostname }}/{{ inventory_hostname }}.vmx"
    when: memsize is defined

  - name: Adjust the numvcpus value on the ESXi VM
    local_action:
      module: shell
      _raw_params: ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null {{ esxi_user }}@{{ esxi_host }} "sed '/numvcpus/s/.*/numvcpus\ =\ \"{{ numvcpus }}\"/' /vmfs/volumes/{{ esxi_ds }}/{{ inventory_hostname }}/{{ inventory_hostname }}.vmx > /vmfs/volumes/{{ esxi_ds }}/{{ inventory_hostname }}/{{ inventory_hostname }}.vmx-adjusted"
    when: numvcpus is defined

  - name: Copy the adjusted vmx into place
    local_action:
      module: shell
      _raw_params: ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null {{ esxi_user }}@{{ esxi_host }} "cp /vmfs/volumes/{{ esxi_ds }}/{{ inventory_hostname }}/{{ inventory_hostname }}.vmx-adjusted /vmfs/volumes/{{ esxi_ds }}/{{ inventory_hostname }}/{{ inventory_hostname }}.vmx"
    when: numvcpus is defined

  - name: Start the VMs
    local_action:
      module: shell
      _raw_params: ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null {{ esxi_user }}@{{ esxi_host }} vim-cmd vmsvc/power.on {{ vm_id.stdout }} 
    when: vm_id.stdout is defined

  - name: waiting 5 minutes VMs to finish starting up
    pause:
      minutes: 5

  - name: Scan the VMS for the VM ID
    local_action:
      module: shell
      _raw_params: ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null {{ esxi_user }}@{{ esxi_host }} vim-cmd vmsvc/getallvms | grep {{ inventory_hostname }} | cut -d" " -f1
    register: vm_id
  
  - debug: msg="{{ vm_id.stdout }}"

  - name: Find the MAC
    local_action:
      module: shell
      _raw_params: ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null {{ esxi_user }}@{{ esxi_host }} vim-cmd vmsvc/device.getdevices {{ vm_id.stdout }} | grep macAddress | sed -e 's/         macAddress = "//g' | sed -e 's/", //g'
    register: vm_mac
  
  - debug: msg="{{ vm_mac.stdout }}"

  - name: Find the Temp IP
    local_action:
      module: shell
      _raw_params: ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null {{ esxi_user }}@{{ esxi_host }} vim-cmd vmsvc/get.guest {{ vm_id.stdout }} | grep 'ipAddress = "{{ esxi_net_prefix }}' | sed -n 1p | cut -d '"' -f 2
    register: vm_temp_ip
  
  - debug: msg="{{ vm_temp_ip.stdout }}"

  - name: Remove existing creation script
    local_action:
      module: file
      path: "{{ gen_script_folder }}/esxi-set-statics"
      state: absent
    run_once: true

  - name: Remove existing network config fragments
    local_action:
      module: file
      path: "{{ gen_script_folder }}/{{ inventory_hostname }}_static.sh"
      state: absent

  - name: Remove existing network script fragments
    local_action:
      module: file
      path: "{{ gen_script_folder }}/{{ inventory_hostname }}_script.frag"
      state: absent

  - name: Generate the static networking config files
    local_action:
      module: template
      src: templates/{{ cluster_type }}-static-net.j2
      dest: "{{ gen_script_folder }}/{{ inventory_hostname }}_static.sh"

  - name: Generate the static networking script files
    local_action:
      module: template
      src: templates/{{ cluster_type }}-static-net-script.j2
      dest: "{{ gen_script_folder }}/{{ inventory_hostname }}_script.frag"

  - name: Combine the script fragments
    local_action:
      module: shell
      _raw_params: cat {{ gen_script_folder }}/*.frag >> {{ gen_script_folder }}/esxi-set-statics
    run_once: true
    
  - name: Remove existing network config fragments
    local_action:
      module: file
      path: "{{ gen_script_folder }}/{{ inventory_hostname }}_script.frag"
      state: absent
    