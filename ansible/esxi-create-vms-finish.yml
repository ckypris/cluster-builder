---
- hosts: all
  gather_facts: false
  vars:
    gen_script_folder: ../tmp/{{ cluster_pkg_folder }}
    deployment_scale: "{{ deployment_scale | default(50) }}"

  roles:
    - role: common
  
  tasks:  
    - name: remove existing creation script
      local_action:
        module: file
        path: "{{ gen_script_folder }}/esxi-set-statics"
        state: absent
      run_once: true

    - name: remove existing network config fragments
      local_action:
        module: file
        path: "{{ gen_script_folder }}/{{ inventory_hostname }}_static.sh"
        state: absent

    - name: remove existing network script fragments
      local_action:
        module: file
        path: "{{ gen_script_folder }}/{{ inventory_hostname }}_script.frag"
        state: absent

- hosts: all
  gather_facts: false
  any_errors_fatal: true
  vars:
    gen_script_folder: ../tmp/{{ cluster_pkg_folder }}
  tasks:  

    - name: ensure the target folder for generated scripts exists
      local_action:
        module: file
        path: "{{ gen_script_folder }}"
        state: directory

    - name: scan the VMS for the VM ID
      local_action:
        module: shell
        _raw_params: ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null {{ esxi_user }}@{{ esxi_host }} vim-cmd vmsvc/getallvms | grep " {{ inventory_hostname }} " | cut -d" " -f1
      register: vm_id
      until: "vm_id.stdout is defined and vm_id.stdout != ''"
      retries: 25
      delay: 5    
    
    - debug: msg="{{ vm_id.stdout }}"

    - name: find the MAC address
      local_action:
        module: shell
        _raw_params: ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null {{ esxi_user }}@{{ esxi_host }} vim-cmd vmsvc/device.getdevices {{ vm_id.stdout }} | grep macAddress | sed -e 's/         macAddress = "//g' | sed -e 's/", //g'
      register: vm_mac
    
    - debug: msg="{{ vm_mac.stdout_lines }}"

    - name: stop the VMs
      local_action:
        module: shell
        _raw_params: ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null {{ esxi_user }}@{{ esxi_host }} vim-cmd vmsvc/power.off {{ vm_id.stdout }} 
      when: vm_id.stdout is defined

    - name: adjust the memSize value on the ESXi VM
      local_action:
        module: shell
        _raw_params: ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null {{ esxi_user }}@{{ esxi_host }} "sed '/memSize/s/.*/memSize\ =\ \"{{ memsize }}\"/' /vmfs/volumes/{{ esxi_ds }}/{{ inventory_hostname }}/{{ inventory_hostname }}.vmx > /vmfs/volumes/{{ esxi_ds }}/{{ inventory_hostname }}/{{ inventory_hostname }}.vmx-adjusted"
      when: memsize is defined

    - name: copy the adjusted vmx into place
      local_action:
        module: shell
        _raw_params: ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null {{ esxi_user }}@{{ esxi_host }} "cp /vmfs/volumes/{{ esxi_ds }}/{{ inventory_hostname }}/{{ inventory_hostname }}.vmx-adjusted /vmfs/volumes/{{ esxi_ds }}/{{ inventory_hostname }}/{{ inventory_hostname }}.vmx"
      when: numvcpus is defined

    - name: adjust the numvcpus value on the ESXi VM
      local_action:
        module: shell
        _raw_params: ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null {{ esxi_user }}@{{ esxi_host }} "sed '/numvcpus/s/.*/numvcpus\ =\ \"{{ numvcpus }}\"/' /vmfs/volumes/{{ esxi_ds }}/{{ inventory_hostname }}/{{ inventory_hostname }}.vmx > /vmfs/volumes/{{ esxi_ds }}/{{ inventory_hostname }}/{{ inventory_hostname }}.vmx-adjusted"
      when: numvcpus is defined

    - name: copy the adjusted vmx into place
      local_action:
        module: shell
        _raw_params: ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null {{ esxi_user }}@{{ esxi_host }} "cp /vmfs/volumes/{{ esxi_ds }}/{{ inventory_hostname }}/{{ inventory_hostname }}.vmx-adjusted /vmfs/volumes/{{ esxi_ds }}/{{ inventory_hostname }}/{{ inventory_hostname }}.vmx"
      when: numvcpus is defined

    - name: adjust the Primary interface network name
      local_action:
        module: shell
        _raw_params: ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null {{ esxi_user }}@{{ esxi_host }} "sed '/ethernet0.networkName/s/.*/ethernet0.networkName\ =\ \"{{ esxi_net }}\"/' /vmfs/volumes/{{ esxi_ds }}/{{ inventory_hostname }}/{{ inventory_hostname }}.vmx > /vmfs/volumes/{{ esxi_ds }}/{{ inventory_hostname }}/{{ inventory_hostname }}.vmx-adjusted"
      when: esxi_net is defined

    - name: copy the adjusted vmx into place
      local_action:
        module: shell
        _raw_params: ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null {{ esxi_user }}@{{ esxi_host }} "cp /vmfs/volumes/{{ esxi_ds }}/{{ inventory_hostname }}/{{ inventory_hostname }}.vmx-adjusted /vmfs/volumes/{{ esxi_ds }}/{{ inventory_hostname }}/{{ inventory_hostname }}.vmx"
      when: esxi_net is defined

    - name: copy the adjusted vmx into place
      local_action:
        module: shell
        _raw_params: ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null {{ esxi_user }}@{{ esxi_host }} "cp /vmfs/volumes/{{ esxi_ds }}/{{ inventory_hostname }}/{{ inventory_hostname }}.vmx-adjusted /vmfs/volumes/{{ esxi_ds }}/{{ inventory_hostname }}/{{ inventory_hostname }}.vmx"
      when: numvcpus is defined

    - name: start the VMs
      local_action:
        module: shell
        _raw_params: ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null {{ esxi_user }}@{{ esxi_host }} vim-cmd vmsvc/power.on {{ vm_id.stdout }} 
      when: vm_id.stdout is defined

    - name: delete the adjusted vmx file
      local_action:
        module: shell
        _raw_params: ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null {{ esxi_user }}@{{ esxi_host }} "rm /vmfs/volumes/{{ esxi_ds }}/{{ inventory_hostname }}/{{ inventory_hostname }}.vmx-adjusted"
      ignore_errors: true

    - name: waiting for VMs to finish starting up
      pause:
        seconds: 10

    - name: find the temporary ip address of the VM
      local_action:
        module: shell
        _raw_params: ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null {{ esxi_user }}@{{ esxi_host }} vim-cmd vmsvc/get.guest {{ vm_id.stdout }} | grep 'ipAddress = "{{ esxi_net_prefix }}' | sed -n 1p | cut -d '"' -f 2
      register: vm_temp_ip
      until: "vm_temp_ip.stdout is defined and vm_temp_ip.stdout != ''"
      retries: 50
      delay: 10    
    
    - debug: msg="{{ vm_temp_ip.stdout }}"

    - fail: msg="failed to determine temporary IP address of VM"
      when: vm_temp_ip.stdout is undefined or vm_temp_ip.stdout == ''

    - name: generate the static networking config files
      local_action:
        module: template
        src: templates/{{ cluster_type }}-static-net.j2
        dest: "{{ gen_script_folder }}/{{ inventory_hostname }}_static.sh"

    - name: generate the static networking script files
      local_action:
        module: template
        src: templates/{{ cluster_type }}-static-net-script.j2
        dest: "{{ gen_script_folder }}/{{ inventory_hostname }}_script.frag"


- hosts: all
  gather_facts: false
  vars:
    gen_script_folder: ../tmp/{{ cluster_pkg_folder }}
  tasks:  

    - name: combine the script fragments
      local_action:
        module: shell
        _raw_params: cat {{ gen_script_folder }}/*.frag >> {{ gen_script_folder }}/esxi-set-statics
      run_once: true
      
    - name: remove existing network config fragments
      local_action:
        module: file
        path: "{{ gen_script_folder }}/{{ inventory_hostname }}_script.frag"
        state: absent
        