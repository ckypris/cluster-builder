---
# This playbook creates a rhel7 docker swarm

- hosts: all
  remote_user: admin
  become: true
  any_errors_fatal: true
  vars:
    # Docker swarm network can be define in order to be sure that
    # swarm cluster doesn't overlap with you infrastructure
    # docker_swarm_network: 10.10.8.0/24

    # You can set any interface, that is listened by docker engine.
    # e.g. docker_swarm_interface: "eth1"
    #docker_swarm_interface: "{{ ansible_default_ipv4['interface'] }}"
    #docker_swarm_addr: "{{ hostvars[inventory_hostname]['ansible_' + docker_swarm_interface]['ipv4']['address'] }}"
    docker_swarm_addr: "{{ hostvars[inventory_hostname]['ansible_host'] }}"
    docker_swarm_port: 2377
    docker_tls_port: 2376
    contiv_remote_user: admin

  roles:
  - role: common
  - role: rhel
  - role: centos-swarm-firewall
  - role: nfs-shares
  
  tasks:

  - name: enable the Docker daemon as a service and start it.
    service:
      name: docker
      state: started
      enabled: yes  

  - name: check if "Swarm Mode" is enabled.
    shell: docker info
    changed_when: False
    register: docker_info
    tags:
      - skip_ansible_lint # Suppressing the linter

  - name: declare the manager node
    shell: wn=$(hostname); mn=(${wn//-/ }); echo $mn-m1
    register: swarm_manager

  - name: get the worker join-token.
    shell: docker swarm join-token -q worker
    changed_when: False
    register: docker_worker_token
    delegate_to: "{{ swarm_manager.stdout }}"
    delegate_facts: True

  - name: get the manager join-token.
    shell: docker swarm join-token -q manager
    changed_when: False
    register: docker_manager_token
    delegate_to: "{{ swarm_manager.stdout }}"
    delegate_facts: True

  - name: join the pending Swarm worker nodes (Combined Mgmt/Data Interface).
    shell: docker swarm join --token "{{ docker_worker_token.stdout }}" {{ swarm_manager.stdout }}
    changed_when: False
    when: "docker_info.stdout.find('Swarm: active') == -1 
    and docker_info.stdout.find('Swarm: pending') == -1 
    and 'docker_swarm_worker' in group_names"

  - name: join the pending Swarm manager nodes (Combined Mgmt/Data Interface).
    shell: docker swarm join --token "{{ docker_manager_token.stdout }}" {{ swarm_manager.stdout }}
    changed_when: False
    when: "docker_info.stdout.find('Swarm: active') == -1
      and docker_info.stdout.find('Swarm: pending') == -1
      and 'docker_swarm_manager' in group_names"

  - name: determine the node name when there is a network_dn
    set_fact:
      node_fqdn: "{{ node_hostname }}.{{ network_dn }}"
    when: "use_fqdn_node_name is defined"

  - name: determine the node name when there is no network_dn
    set_fact:
      node_fqdn: "{{ inventory_hostname }}"
    when: "use_fqdn_node_name is undefined"

  - name: get list of labels
    command: >-
          docker node inspect
          -f {% raw %}'{{range $key, $value := .Spec.Labels}}{{printf "%s\n" $key}}{{end}}'{% endraw %}
          {{ node_fqdn }}
    register: docker_swarm_labels
    changed_when: False
    delegate_to: "{{ swarm_manager.stdout }}"
    delegate_facts: True
    tags:
      - skip_ansible_lint
      - swarm_labels

  - debug:
      msg: "Labels: {{ docker_swarm_labels.stdout_lines }}"

  - name: assign labels to swarm nodes | if any
    command: docker node update --label-add {{ item }}=true {{ node_fqdn }}
    changed_when: False
    with_items:
      - "{{ swarm_labels  | default([]) }}"
    delegate_to: "{{ swarm_manager.stdout }}"
    delegate_facts: True
    tags:
      - skip_ansible_lint
      - swarm_labels

    ####OLD
  - name: generate the wrapper docker-env script
    local_action:
      module: template
      src: templates/docker-env.j2
      dest: ../clusters/{{ cluster_pkg_folder }}/docker-env
      mode: 0766
    when: "inventory_hostname == groups['docker_swarm_manager'][0]"
    become: false
    ignore_errors: true

  - name: generate the client test script
    local_action:
      module: template
      src: templates/test-{{ cluster_type }}.j2
      dest: ../clusters/{{ cluster_pkg_folder }}/test-cluster
      mode: 0766
    when: "inventory_hostname == groups['docker_swarm_manager'][0]"
    become: false
    ignore_errors: true

  - name: remove tmp cluster folder if exists
    local_action:
      module: shell
      _raw_params: "rm -rf ../tmp/{{ cluster_pkg_folder }}"
    become: false
    when: "inventory_hostname == groups['docker_swarm_manager'][0]"
    ignore_errors: true

