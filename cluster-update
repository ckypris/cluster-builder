#!/bin/bash
INVENTORY_FILE=$1
SERVER_WAIT=90s
REMOTE_USER=root
ANSIBLE_DISPLAY_SKIPPED_HOSTS=false

function k8s_patch () {
  
  echo 
  echo -e " ${TC}Verifying host access:${NC}"
  echo
  ansible all -i $INVENTORY_FILE -m ping -u $REMOTE_USER
  echo

  echo -e " ${TC}Updating cluster: ${CLUSTER_TYPE_NAME}${NC}"
  echo
  ansible-playbook -i $INVENTORY_FILE ansible/k8s-update.yml  --extra-vars="cluster_pkg_folder=${CLUSTER_PKG_FOLDER}"
  if [ $? -ne 0 ]; then
    echo "FAIL: ${CLUSTER_TYPE_NAME} creation failed!"
    exit 1
  fi

  if [ -f clusters/$CLUSTER_PKG_FOLDER/test-cluster ]; then
    bash clusters/$CLUSTER_PKG_FOLDER/test-cluster
  fi

  echo -e "${TC}------------------------------------------------------------${NC}"
  echo "UPDATE SUCCESS: ${CLUSTER_TYPE_NAME}!"
}

function cluster_info_display() {

  echo
  echo -e "${TC}-----------------------------------------------------------------------------------${NC}"
  echo
  echo -e " ${TC}Cluster Update${NC}"
  echo
  echo -e " Cluster Name    : ${TC}${CLUSTER_NAME}${NC}"
  echo -e " Cluster Package : ${TC}${CLUSTER_PKG_FOLDER}${NC}"
  echo -e " Cluster Type    : ${TC}${CLUSTER_TYPE} - ${CLUSTER_TYPE_NAME}${NC}"
  echo -e " VMware Target   : ${TC}${VMWARE_TARGET}${NC}"
  if [ "$CLUSTER_TYPE" == "centos-k8s" ] || [ "$CLUSTER_TYPE" == "centos8-k8s" ] || [ "$CLUSTER_TYPE" == "fedora-k8s" ] || [ "$CLUSTER_TYPE" == "ubuntu-k8s" ]; then
  if [ "$K8S_VERSION" == "" ]; then
    K8S_VERSION=default
  fi
  if [ "$K8S_CNI" == "" ]; then
    K8S_CNI=default
  fi
  if [ "$K8S_CRI" == "" ]; then
    K8S_CRI=default
  fi
  echo -e " K8s Version     : ${TC}${K8S_VERSION}${NC}"
  echo -e " K8s CRI         : ${TC}${K8S_CRI}${NC}"
  echo -e " K8s CNI         : ${TC}${K8S_CNI}${NC}"
  fi
  echo
  echo -e "${TC}-----------------------------------------------------------------------------------${NC}"
  echo

}

PLATFORM=`uname -ra`
VMWARE_APP="VMware Workstation"
if [[ $PLATFORM == *"Microsoft"* ]]; then 
  export ANSIBLE_CONFIG=$PWD/ansible.cfg
elif [[ $PLATFORM == *"Darwin"* ]]; then
  VMWARE_APP="VMware Fusion"
fi

if [ -z "${INVENTORY_FILE}" ]; then
  read -s "Enter the target cluster folder: " INVENTORY_FILE
fi

INVENTORY_FILE=./clusters/$INVENTORY_FILE/hosts

if [ ! -f $INVENTORY_FILE ]; then
  echo
  echo "Unable to find inventory file @: ${INVENTORY_FILE}"
  exit 1
fi

CLUSTER_TYPE=`sed -n '/^cluster_type=/ {s///p;q;}' $INVENTORY_FILE | tr -d '\n' | tr -d '\r'`
VMWARE_TARGET=`sed -n '/^vmware_target=/ {s///p;q;}' $INVENTORY_FILE | tr -d '\n' | tr -d '\r'`
CLUSTER_NAME=`sed -n '/^cluster_name=/ {s///p;q;}' $INVENTORY_FILE | tr -d '\n' | tr -d '\r'`
REMOTE_USER=`sed -n '/^remote_user=/ {s///p;q;}' $INVENTORY_FILE | tr -d '\n' | tr -d '\r'`
CLUSTER_PROTECTED=`sed -n '/^protected=/ {s///p;q;}' $INVENTORY_FILE | tr -d '\n' | tr -d '\r'`
K8S_VERSION=`sed -n '/^k8s_version=/ {s///p;q;}' $INVENTORY_FILE | tr -d '\n' | tr -d '\r'`
K8S_CRI=`sed -n '/^k8s_container_runtime=/ {s///p;q;}' $INVENTORY_FILE | tr -d '\n' | tr -d '\r'`
K8S_CNI=`sed -n '/^k8s_network_cni=/ {s///p;q;}' $INVENTORY_FILE | tr -d '\n' | tr -d '\r'`

if [ "$CLUSTER_PROTECTED" == "true" ]; then
  echo
  echo -e "${TC}Cluster Patching Blocked!${NC}"
  echo "The cluster has been marked protected=true" 
  echo
  echo "To PATCH the cluster ${CLUSTER_NAME} remove this flag, "
  echo "temporarily from the ${CLUSTER_PKG_FOLDER}/hosts file."
  echo
  exit 1
fi  

CLUSTER_PKG_PATH=`dirname $INVENTORY_FILE`
CLUSTER_PKG_FOLDER=${CLUSTER_PKG_PATH//.\/clusters\//} 

if [ -f clusters/$CLUSTER_PKG_FOLDER/.passwords ]; then
  source clusters/$CLUSTER_PKG_FOLDER/.passwords
fi

TEMP_SCRIPT_PATH=./tmp/$CLUSTER_PKG_FOLDER

if [ "$CLUSTER_TYPE" == 'centos-dcos' ]; then
  echo "** DC/OS Not Supported! **"
  exit;
elif [ "$CLUSTER_TYPE" == 'centos-k8s' ]; then
  CLUSTER_TYPE_NAME='CentOS 7 Kubernetes'
  REMOTE_USER=admin
elif [ "$CLUSTER_TYPE" == 'centos8-k8s' ]; then
  CLUSTER_TYPE_NAME='CentOS 8 Kubernetes'
  REMOTE_USER=admin
elif [ "$CLUSTER_TYPE" == 'fedora-k8s' ]; then
  CLUSTER_TYPE_NAME='Fedora Kubernetes'
  REMOTE_USER=admin
elif [ "$CLUSTER_TYPE" == 'ubuntu-k8s' ]; then
  CLUSTER_TYPE_NAME='Ubuntu Kubernetes'
  REMOTE_USER=sysop
elif [ "$CLUSTER_TYPE" == 'targetd-server' ]; then
  echo "** Targetd patching not supported using this script, please patch manually! **"
  exit;
fi


TC=''
NC=''
if [ "$TERM" == "xterm-256color" ]; then
  TC='\033[1;34m'
  NC='\033[0m' # No Color
fi 

cluster_info_display

echo
echo -e " ${TC}ATTENTION!${NC}"
echo
echo " Cluster update uses the --delete-local-data flag when draining."
echo -e " All PODs using ${TC}local data${NC} will be re-initialized with all EXISTING DATA LOST!"
echo

read -p " Are you sure you want to begin updating this cluster? (y/n): "  patch_confirm
if [ "$patch_confirm" != "y" ] && [ "$patch_confirm" != "Y" ]; then
  echo
  echo -e "${TC}!! Cluster update aborted!${NC}"
  echo
  exit 1
fi

START_TIME=$SECONDS

k8s_patch

ELAPSED_TIME=$(($SECONDS - $START_TIME))
echo "Cluster Updated in: $(($ELAPSED_TIME/60)) min $(($ELAPSED_TIME%60)) sec" 
echo -e "${TC}------------------------------------------------------------${NC}"
echo
echo -e "Enjoy your updated ${TC}${CLUSTER_TYPE_NAME}${NC}!"
echo

  