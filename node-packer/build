#!/bin/bash

OP_KEY=~/.ssh/id_rsa.pub 
IMAGE=centos7
if [ "$1" != "" ]; then
  IMAGE=$1
fi

if [ ! -f keys/authorized_keys ]; then
  if [ ! -f $OP_KEY ]; then
    echo 
    echo "Error: 'authorized_keys' must be set before the image is built, run 'bash keys/set-key' to use your current public key"
    echo "Unable to find ${OP_KEY}, can't auto-set the authorized_keys!"
    echo "Make sure keys/authorized_keys exists and has the cluster-builder operator key."
    exit 1
  fi
  bash keys/set-key
fi

START_TIME=$SECONDS

PACKER_CMD="packer build cluster-node-${IMAGE}.json"
if [ "`uname -r | grep Microsoft | wc -l | xargs`" == "1" ]; then 
  echo "Building in Windows Mode using cmd.exe..."
  WIN_BUILD_DIR=`wslpath -w $PWD`
  echo "Using path: ${WIN_BUILD_DIR}"
  PACKER_CMD="cmd.exe /c \"cd ${WIN_BUILD_DIR} && packer.exe build cluster-node-${IMAGE}.json && exit\""
  rm -rf 'output_'$IMAGE'_vmx'
fi

if [ "$IMAGE" == "rhel7" ]; then
  if [ "$3" == "" ]; then
    echo
    echo "Error: No license key found. Make sure rhel.lic is located in the clusters folder."
    exit 1
  fi
  RHEL_LIC=$3 
  RHEL_FOLDER=$2
  PACKER_CMD="packer build -var rhel_folder=${RHEL_FOLDER} -var rhel_lic=${RHEL_LIC} cluster-node-${IMAGE}.json"
  rm -rf 'output_'$IMAGE'_vmx'
fi

if [ "$IMAGE" == "centos7-dcos" ] || \
    [ "$IMAGE" == "win2016" ] || \
    [ "$IMAGE" == "win2019" ] || \
    [ "$IMAGE" == "centos7" ] || \
    [ "$IMAGE" == "centos8" ] || \
    [ "$IMAGE" == "fedora" ] || \
    [ "$IMAGE" == "ubuntu" ] || \
    [ "$IMAGE" == "rhel7" ]; then
  echo
  echo 'Building VM image:' $IMAGE
  rm -rf 'output_'$IMAGE'_vmx'
  eval $PACKER_CMD
  rm -rf 'output_'$IMAGE'_vmx'
elif [ "$IMAGE" == "targetd-server" ]; then
  echo
  echo 'Building Targetd iSCSI Storage Appliance'
  PACKER_CMD="packer build targetd-server-appliance.json"
  if [ "`uname -r | grep Microsoft | wc -l | xargs`" == "1" ]; then 
    echo "Building in Windows Mode using cmd.exe..."
    WIN_BUILD_DIR=`wslpath -w $PWD`
    echo "Using path: ${WIN_BUILD_DIR}"
    PACKER_CMD="cmd.exe /c \"cd ${WIN_BUILD_DIR} && packer.exe build targetd-server-appliance.json && exit\""
  fi
  rm -rf 'output_'$IMAGE'_vmx'
  eval $PACKER_CMD
  rm -rf 'output_'$IMAGE'_vmx'
else
  echo
  echo 'Error: Not a valid VM image type!'
  echo 'usage: build [centos7 (default), centos8, centos7-dcos, rhel7, win2016, win2019, coreos-provisioner, coreos-pxe, fedora, targetd-server]'
  exit
fi

ELAPSED_TIME=$(($SECONDS - $START_TIME))
echo "Template image built in: $(($ELAPSED_TIME/60)) min $(($ELAPSED_TIME%60)) sec" 
echo
